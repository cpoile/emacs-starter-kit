#+TITLE: Org-mode and GTD Customizations
#+OPTIONS: toc:nil num:nil ^:nil

* How to use this document
Settings in this section are taken from http://doc.norang.ca/org-mode.html.
Bernt Hansen's original is in (on my machine, obviously) [[file:~/Documents/ORG/org-mode-doc/org-mode.org]], which is a clone of Bernt's git repo. For updates, =git pull= from his master branch, and then maybe diff with this document to see if any of his recent changes apply? 

** Local Org-mode Settings, from kjhealy's Original
*** Default startup values
Instead of putting these in every org file, put it here once.
#+source: org-defaults
#+begin_src emacs-lisp
  (setq org-startup-folded 'content)
#+end_src

*** Smart-quote binding (not tangled)
When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default. 

#+source: org-mode-smartquote-key
#+header: :tangle no
#+begin_src emacs-lisp
  (add-hook 'org-mode-hook 'smart-quote-keys)
  
  (defun smart-quote-keys ()
    (require 'typopunct)
    (typopunct-change-language 'english)
    (local-set-key (kbd "C-c \'") 'typopunct-insert-single-quotation-mark)
    (local-set-key (kbd "C-c \"") 'typopunct-insert-quotation-mark))
#+end_src

*** Archive Settings
    Where archived projects and tasks go.
#+source: orgmode-archive
#+begin_src emacs-lisp
  (setq org-archive-location "~/Documents/Org/archive/archive.org::From %s")
#+end_src

*** Mobile Settings
   Sync orgmode files with Dropbox and iPhone. 
#+src-name: orgmode-mobile
#+begin_src emacs-lisp
   ;; Set to the location of your Org files on your local system
   (setq org-directory "~/Documents/Org")
   ;; Set to <your Dropbox root directory>/MobileOrg.
   (setq org-mobile-directory "~/Dropbox/MobileOrg")
   ;; Set to the files (or directory of files) you want sync'd
   (setq org-agenda-files (quote ("~/Dropbox/Org")))
   ;; Set to the name of the file where new notes will be stored
   (setq org-mobile-inbox-for-pull "~/Dropbox/Org/from-mobile.org")
   

#+end_src

*** Babel Settings
   Configure org-mode so that when you edit source code in an indirect buffer (with C-c '), the buffer is opened in the current window. That way, your window organization isn't broken when switching.

#+source: orgmode-indirect-buffer-settings
#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

*** Exporter updates for Org 8.0
Tue Apr 30 16:23:54 2013

We now need to explicitly load required exporters

#+begin_src emacs-lisp
(require 'ox-html)
(require 'ox-latex)
(require 'ox-ascii)
#+end_src

*** XeLaTeX and pdfLaTeX Export Settings
   Configure org-mode to export directly to PDF using pdflatex or
   xelatex, compiling the bibliography as it goes, with my preferred
   setup in each case. There is a good deal of local stuff in this section. The required style files used below are available at https://github.com/kjhealy/latex-custom-kjh. You may need to adjust or remove some of these settings depending on your
   preferences and local configuration.

#+source: orgmode-latex-export
#+begin_src emacs-lisp
  ;; turn off the default toc behavior; deal with it properly in headers to files.
  (defun org-latex-no-toc (depth)  
    (when depth
      (format "%% Org-mode is exporting headings to %s levels.\n"
              depth)))
  (setq org-latex-format-toc-function 'org-latex-no-toc)
  
  
  (unless (boundp 'org-latex-classes)
    (setq org-latex-classes nil))
  (add-to-list 'org-latex-classes
               '("apamanuscript"
                 "\\documentclass[man]{apa6} \n \\input{vc} % vc package"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")
                 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                 ("\\paragraph{%s}" . "\\paragraph*{%s}")
                 ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  
  (add-to-list 'org-latex-classes
               '("tuftehandout"
                 "\\documentclass[nobib]{tufte-handout}
                    \\usepackage{hyphenat}
                    \\usepackage[style=apa,sortcites=true,sorting=nyt,
                    autocite=footnote,backend=biber]{biblatex}
                    \\usepackage{enumitem}
                    \\setitemize{itemsep=0pt, parsep=1pt}"
                 ("\\section{%s}" . "\\section*{%s}")
                 ("\\subsection{%s}" . "\\subsection*{%s}")))
  
  ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
  ;; but adapted to use latexmk 4.22 or higher.  
  (defun my-auto-tex-cmd ()
    "When exporting from .org with latex, automatically run latex,
                         pdflatex, or xelatex as appropriate, using latexmk."
    (let ((texcmd)))
    ;; default command: pdflatex 
    (setq texcmd "latexmk -pdflatex=pdflatex -pdf -outdir=%o %f")
    ;; pdflatex -> .pdf
    (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
        (setq texcmd "latexmk -pdflatex=pdflatex -pdf -outdir=%o %f"))
    ;; xelatex -> .pdf
    (if (string-match "LATEX_CMD: xelatex" (buffer-string))
        (setq texcmd "latexmk -pdflatex=xelatex  -pdf -output-directory %o %f"))
    ;; LaTeX compilation command
    (setq org-latex-to-pdf-process (list texcmd)))
  
  (add-hook 'org-latex-after-initial-vars-hook 'my-auto-tex-cmd)
  
  ;; Default packages included in /every/ tex file, latex, pdflatex or xelatex
                                          ;    (setq org-latex-packages-alist
                                          ;          '(("" "graphicx" t)
                                          ;            ("" "longtable" nil)
                                          ;           ("" "float" )))
  
  ;; Custom packages
  (defun my-auto-tex-parameters ()
    "Automatically select the tex packages to include. These will be in ~/Documents/texmf/tex/latex/misc"
    ;; default packages for ordinary latex or pdflatex export
    (setq org-latex-default-packages-alist
          '(("AUTO" "inputenc" t)
            ("" "org-preamble-pdflatex" t))))
  ;; Packages to include when xelatex is used
                                          ;      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
                                          ;          (setq org-latex-default-packages-alist
  ;;'(("minted" "org-preamble-xelatex" t) ))))
                                          ;                '(("minted" "org-preamble-xelatex" t) ))))
  
  (add-hook 'org-latex-after-initial-vars-hook 'my-auto-tex-parameters)      
  
#+end_src

*** Old version of orgmode-latex-export
#+source: orgmode-xelatex-export
#+header: :tangle no
#+begin_src emacs-lisp
  (require 'org-latex)   
    ;; Choose either listings or minted for exporting source code blocks.
    ;; Using minted (as here) requires pygments be installed. To use the
    ;; default listings package instead, use
    ;; (setq org-latex-listings t)
    ;; and change references to "minted" below to "listings"
    (setq org-latex-listings 'minted)
    
    ;; default settings for minted code blocks
    (setq org-latex-minted-options
          '(;("frame" "single")
            ("bgcolor" "bg") ; bg will need to be defined in the preamble of your document. It's defined in org-preamble-pdflatex.sty and org-preamble-xelatex.sty below.
            ("fontsize" "\\small")
            ))
  ;; turn off the default toc behavior; deal with it properly in headers to files.
  (defun org-latex-no-toc (depth)  
      (when depth
        (format "%% Org-mode is exporting headings to %s levels.\n"
                depth)))
  (setq org-latex-format-toc-function 'org-latex-no-toc)
  
    (add-to-list 'org-latex-classes
                 '("memarticle"
                   "\\documentclass[11pt,oneside,article]{memoir}\n   %\\input{vc} % vc package; removed for now"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    
    (add-to-list 'org-latex-classes
                 '("membook"
                   "\\documentclass[11pt,oneside]{memoir}\n       %\\input{vc} % vc package; removed for now"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
    
    ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
    ;; but adapted to use latexmk 4.22 or higher.  
    (defun my-auto-tex-cmd ()
      "When exporting from .org with latex, automatically run latex,
                       pdflatex, or xelatex as appropriate, using latexmk."
      (let ((texcmd)))
      ;; default command: pdflatex 
      (setq texcmd "latexmk -pdflatex=pdflatex -pdf %f")        
      ;; pdflatex -> .pdf
      (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex=pdflatex -pdf %f"))
      ;; xelatex -> .pdf
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex=xelatex  -pdf %f"))
      ;; LaTeX compilation command
      (setq org-latex-to-pdf-process (list texcmd)))
    
    (add-hook 'org-latex-after-initial-vars-hook 'my-auto-tex-cmd)
    
    ;; Default packages included in /every/ tex file, latex, pdflatex or xelatex
    (setq org-latex-packages-alist
          '(("" "graphicx" t)
            ("" "longtable" nil)
            ("" "float" )))
    
    ;; Custom packages
    (defun my-auto-tex-parameters ()
      "Automatically select the tex packages to include. See https://github.com/kjhealy/latex-custom-kjh for the support files included here."
      ;; default packages for ordinary latex or pdflatex export
      (setq org-latex-default-packages-alist
            '(("AUTO" "inputenc" t)
              ("minted,minion" "org-preamble-pdflatex" t)))        
      ;; Packages to include when xelatex is used
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq org-latex-default-packages-alist
                '(("minted" "org-preamble-xelatex" t) ))))
    
    (add-hook 'org-latex-after-initial-vars-hook 'my-auto-tex-parameters)      
#+End_src

*** ebib and citation settings
    ebib is a bibtex database manager that works inside emacs. It can
    talk to org-mode. See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-17_2][this Worg tutorial]] for details. 
#+source: ebib-setup
#+header: :tangle yes
#+begin_src emacs-lisp
    (org-add-link-type "ebib" 'ebib)
  
   (org-add-link-type 
     "cite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "cite:" desc)))
               (format "\\cite{%s}" path)
               (format "\\cite[%s]{%s}" desc path)
               )))))
  
   (org-add-link-type 
     "parencite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "parencite:" desc)))
               (format "\\parencite{%s}" path)
               (format "\\parencite[%s]{%s}" desc path)
  )))))
  
  (org-add-link-type 
     "textcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "textcite:" desc)))
               (format "\\textcite{%s}" path)
               (format "\\textcite[%s]{%s}" desc path)
  )))))
  
  (org-add-link-type 
     "autocite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "autocite:" desc)))
               (format "\\autocite{%s}" path)
           (format "\\autocite[%s]{%s}" desc path)
  )))))
  
  (org-add-link-type 
   "footcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "footcite:" desc)))
           (format "\\footcite{%s}" path)
         (format "\\footcite[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
   "fullcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "fullcite:" desc)))
           (format "\\fullcite{%s}" path)
         (format "\\fullcite[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
   "citetitle" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitle:" desc)))
           (format "\\citetitle{%s}" path)
         (format "\\citetitle[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
   "citetitles" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitles:" desc)))
           (format "\\citetitles{%s}" path)
         (format "\\citetitles[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
     "headlessfullcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
               (format "\\headlessfullcite{%s}" path)
               (format "\\headlessfullcite[%s]{%s}" desc path)
  )))))   
#+end_src

*** HTML export Settings (not tangled)
Create =html= files form the =org= sources, to help with documentation. To set up org-mode for publishing projects to HTML you will need to change these settings, as they apply only to the Starter Kit. 

#+source: html-export-settings
#+header: :tangle no
#+begin_src emacs-lisp
  (setq org-publish-project-alist
         '(("org"
            :base-directory "~/.emacs.d/"
            :publishing-directory "~/Documents/websites/esk/"
            :auto-sitemap t
            :sitemap-filename "index.org"
            :sitemap-title "Emacs Starter Kit for the Social Sciences: Documentation"
            :section-numbers t
            :table-of-contents nil
            :style "<link rel=\"stylesheet\"
                   href=\"http://kieranhealy.org/stylesheets/screen.css\"
                   type=\"text/css\"/>")))
  
    (setq org-html-head-extra "") 
    (setq org-export-html-postamble nil)
  
#+end_src

*** Org-babel and clojure
Not working yet, as far as I can tell...
#+header: :tangle no
#+begin_src emacs-lisp
;; Patch ob-clojure to work with nrepl
(declare-function nrepl-send-string-sync "ext:nrepl" (code &optional ns))

(defun org-babel-execute:clojure (body params)
  "Execute a block of Clojure code with Babel."
  (require 'nrepl)
  (with-temp-buffer
    (insert (org-babel-expand-body:clojure body params))
    ((lambda (result)
       (let ((result-params (cdr (assoc :result-params params))))
         (if (or (member "scalar" result-params)
                 (member "verbatim" result-params))
             result
           (condition-case nil (org-babel-script-escape result)
             (error result)))))
     (plist-get (nrepl-send-string-sync
                 (buffer-substring-no-properties (point-min) (point-max))
                 (cdr (assoc :package params)))
                :value))))
#+end_src

* Org-mode / GTD Settings
Settings here and elsewhere are taken from http://doc.norang.ca/org-mode.html
On this setup, the norang.ca org-mode.html file is cloned into [[file:~/Documents/ORG/org-mode-doc/]].
This is probably what we want to diff.
** Agenda Setup
:PROPERTIES:
:CUSTOM_ID: AgendaSetup
:END:

Here is cpoile's custom =org-agenda-files= setup.

#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-user-agenda-files (quote ("~/Documents/org/agenda"
                                 ;;"~/Documents/org/client1"  
                                 )))
#+end_src


Here is my current =org-agenda-files= setup.
#+header: :tangle no
#+header: :tangle yes
#+begin_src emacs-lisp
(setq org-agenda-files (quote ("~/git/org"
                               "~/git/org/client1"
                               "~/git/client2")))
#+end_src

#+header: :tangle yes
#+begin_src emacs-lisp :exports none
  ;; The following setting is different from the document so that you
  ;; can override the document org-agenda-files by setting your
  ;; org-agenda-files in the variable org-user-agenda-files
  ;;
  (if (boundp 'org-user-agenda-files)
      (setq org-agenda-files org-user-agenda-files)
    (setq org-agenda-files (quote ("~/git/org"
                                 "~/git/org/client1"
                                 "~/git/client2"))))
#+end_src

=org-mode= manages the =org-agenda-files= variable automatically using
=C-c [= and =C-c ]= to add and remove files respectively.  However,
this replaces my directory list with a list of explicit filenames
instead and is not what I want.  If this occurs then adding a new org
file to any of the above directories will not contribute to my agenda
and I will probably miss something important.

I have disabled the =C-c [= and =C-c ]= keys in =org-mode-hook= to
prevent messing up my list of directories in the =org-agenda-files=
variable.  I just add and remove directories manually in my =.emacs=
file.  Changing the list of directories in =org-agenda-files= happens
very rarely since new files in existing directories are automatically
picked up.

I also disable the comment function =C-c ;= since I never use those.
I kept accidentally hitting this key sequence when doing =C-c
singlequote= for editing source blocks.

In the example above I have =~/git/client2= in a separate git
repository from ~/git/org.  This gives me the flexibility of leaving
confidential information at the client site and having all of my
personal information available everywhere I use org-mode.  I
synchronize my personal repositories on multiple machines and skip the
confidential info on the non-client laptop I travel with.
=org-agenda-files= on this laptop does not include the =~/git/client2=
directory.
** Org File Structure
:PROPERTIES:
:CUSTOM_ID: OrgFileStructure
:END:

Most of my org files are set up with level 1 headings as main
categories only.  Tasks and projects normally start as level 2.

Here are some examples of my level 1 headings in

=todo.org=:

- Special Dates

  Includes level 2 headings for

  - Birthdays
  - Anniversaries
  - Holidays

- Finances
- Health and Recreation
- House Maintenance
- Lawn and Garden Maintenance
- Notes
- Tasks
- Vehicle Maintenance
- Passwords


=norang.org=:

- System Maintenance
- Payroll
- Accounting
- Finances
- Hardware Maintenance
- Tasks
- Research and Development
- Notes
- Purchase Order Tracking
- Passwords

Each of these level 1 tasks normally has a =property drawer=
specifying the category for any tasks in that tree.  Level 1 headings
are set up like this:

#+begin_src org :exports src
,* Health and Recreation
  PROPERTIES:
  CATEGORY: Health
  END:
  ...
,* House Maintenance
  PROPERTIES:
  CATEGORY: House
  END:
#+end_src
** Key bindings
:PROPERTIES:
:CUSTOM_ID: KeyBindings
:END:

I live in the agenda.  To make getting to the agenda faster I mapped
=F12= to the sequence =C-c a= since I'm using it hundreds of times a
day.

I have the following custom key bindings set up for my emacs (sorted by frequency).

| Key     | For                                             | Used       |
|---------+-------------------------------------------------+------------|
| F12     | Agenda (1 key less than C-c a)                  | Very Often |
| C-c b   | Switch to org file                              | Very Often |
| F11     | Goto currently clocked item                     | Very Often |
| C-M-r   | Capture a task                                  | Very Often |
| C-F11   | Clock in a task (show menu with prefix)         | Often      |
| f9 g    | Gnus - I check mail regularly                   | Often      |
| f5      | Show todo items for this subtree                | Often      |
| S-f5    | Widen                                           | Often      |
| f9 b    | Quick access to bbdb data                       | Often      |
| f9 c    | Calendar access                                 | Often      |
| C-S-f12 | Save buffers and publish current project        | Often      |
| C-c l   | Store a link for retrieval with C-c C-l         | Often      |
| f8      | Go to next org file in org-agenda-files         | Sometimes  |
| f9 r    | Boxquote selected region                        | Sometimes  |
| f9 t    | Insert inactive timestamp                       | Sometimes  |
| f9 v    | Toggle visible mode (for showing/editing links) | Sometimes  |
| C-f9    | Previous buffer                                 | Sometimes  |
| C-f10   | Next buffer                                     | Sometimes  |
| C-x n r | Narrow to region                                | Sometimes  |
| f9 f    | Boxquote insert a file                          | Sometimes  |
| f9 i    | Info manual                                     | Sometimes  |
| f9 I    | Punch Clock In                                  | Sometimes  |
| f9 O    | Punch Clock Out                                 | Sometimes  |
| f9 o    | Switch to org scratch buffer                    | Sometimes  |
| f9 s    | Switch to scratch buffer                        | Sometimes  |
| C-c r   | Capture a task (from my mobile phone)           | Rare       |
| f9 h    | Hide other tasks                                | Rare       |
| f7      | Toggle line truncation/wrap                     | Rare       |
| f9 T    | Tabify region                                   | Rare       |
| f9 U    | Untabify region                                 | Rare       |
| C-c a   | Enter Agenda (minimal emacs testing)            | Rare       |

Here is the keybinding setup in lisp:
#+header: :tangle yes
#+header: :tangle yes
#+begin_src emacs-lisp
;; Custom Key Bindings
(global-set-key (kbd "<f12>") 'org-agenda)
(global-set-key (kbd "<f5>") 'bh/org-todo)
(global-set-key (kbd "<S-f5>") 'bh/widen)
(global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
(global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
(global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
(global-set-key (kbd "<f9> b") 'bbdb)
(global-set-key (kbd "<f9> c") 'calendar)
(global-set-key (kbd "<f9> f") 'boxquote-insert-file)
(global-set-key (kbd "<f9> g") 'gnus)
(global-set-key (kbd "<f9> h") 'bh/hide-other)
(global-set-key (kbd "<f9> n") 'org-narrow-to-subtree)
(global-set-key (kbd "<f9> w") 'widen)
(global-set-key (kbd "<f9> u") 'bh/narrow-up-one-level)

(global-set-key (kbd "<f9> I") 'bh/punch-in)
(global-set-key (kbd "<f9> O") 'bh/punch-out)

(global-set-key (kbd "<f9> o") 'bh/make-org-scratch)

(global-set-key (kbd "<f9> r") 'boxquote-region)
(global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)

(global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
(global-set-key (kbd "<f9> T") 'tabify)
(global-set-key (kbd "<f9> U") 'untabify)

(global-set-key (kbd "<f9> v") 'visible-mode)
(global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
(global-set-key (kbd "C-<f9>") 'previous-buffer)
(global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
(global-set-key (kbd "C-x n r") 'narrow-to-region)
(global-set-key (kbd "C-<f10>") 'next-buffer)
(global-set-key (kbd "<f11>") 'org-clock-goto)
(global-set-key (kbd "C-<f11>") 'org-clock-in)
(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
(global-set-key (kbd "C-M-r") 'org-capture)
(global-set-key (kbd "C-c r") 'org-capture)

(defun bh/hide-other ()
  (interactive)
  (save-excursion
    (org-back-to-heading 'invisible-ok)
    (hide-other)
    (org-cycle)
    (org-cycle)
    (org-cycle)))

(defun bh/set-truncate-lines ()
  "Toggle value of truncate-lines and refresh window display."
  (interactive)
  (setq truncate-lines (not truncate-lines))
  ;; now refresh window display (an idiom from simple.el):
  (save-excursion
    (set-window-start (selected-window)
                      (window-start (selected-window)))))

(defun bh/make-org-scratch ()
  (interactive)
  (find-file "/tmp/publish/scratch.org")
  (gnus-make-directory "/tmp/publish"))

(defun bh/switch-to-scratch ()
  (interactive)
  (switch-to-buffer "*scratch*"))
#+end_src

The main reason I have special key bindings (like =F11=, and =F12=) is
so that the keys work in any mode.  If I'm in the Gnus summary buffer
then =C-u C-c C-x C-i= doesn't work, but the =C-F11= key combination
does and this saves me time since I don't have to visit an org-mode
buffer first just to clock in a recent task.

*** Org mode setup
#+header: :tangle yes
#+begin_src emacs-lisp
  ;; Standard key bindings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+end_src

*** Keybindings
#+header: :tangle yes
#+begin_src emacs-lisp
  ;; Custom Key Bindings
  (global-set-key (kbd "<f12>") 'org-agenda)
  (global-set-key (kbd "<f5>") 'bh/org-todo)
  (global-set-key (kbd "<S-f5>") 'bh/widen)
  (global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
  (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
  (global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
  (global-set-key (kbd "<f9> b") 'bbdb)
  (global-set-key (kbd "<f9> c") 'calendar)
  (global-set-key (kbd "<f9> f") 'boxquote-insert-file)
  ;(global-set-key (kbd "<f9> g") 'gnus)
  (global-set-key (kbd "<f9> h") 'bh/hide-other)
  (global-set-key (kbd "<f9> n") 'org-narrow-to-subtree)
  (global-set-key (kbd "<f9> w") 'widen)
  (global-set-key (kbd "<f9> u") 'bh/narrow-up-one-level)
  
  (global-set-key (kbd "<f9> I") 'bh/punch-in)
  (global-set-key (kbd "<f9> O") 'bh/punch-out)
  
  (global-set-key (kbd "<f9> o") 'bh/make-org-scratch)
  
  (global-set-key (kbd "<f9> r") 'boxquote-region)
  (global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)
  
  (global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
  ;(global-set-key (kbd "<f9> T") 'tabify)
  ;(global-set-key (kbd "<f9> U") 'untabify)
  
  (global-set-key (kbd "<f9> v") 'visible-mode)
  (global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
  (global-set-key (kbd "C-<f9>") 'previous-buffer)
  (global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
  ;(global-set-key (kbd "C-x n r") 'narrow-to-region)
  (global-set-key (kbd "C-<f10>") 'next-buffer)
  (global-set-key (kbd "<f11>") 'org-clock-goto)
  (global-set-key (kbd "C-<f11>") 'org-clock-in)
  ;(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
  (global-set-key (kbd "C-M-r") 'org-capture)
  (global-set-key (kbd "C-c r") 'org-capture)
  
  (defun bh/hide-other ()
    (interactive)
    (save-excursion
      (org-back-to-heading 'invisible-ok)
      (hide-other)
      (org-cycle)
      (org-cycle)
      (org-cycle)))
  
  (defun bh/set-truncate-lines ()
    "Toggle value of truncate-lines and refresh window display."
    (interactive)
    (setq truncate-lines (not truncate-lines))
    ;; now refresh window display (an idiom from simple.el):
    (save-excursion
      (set-window-start (selected-window)
                        (window-start (selected-window)))))
  
  (defun bh/make-org-scratch ()
    (interactive)
    (find-file "/tmp/publish/scratch.org")
    (gnus-make-directory "/tmp/publish"))
  
  (defun bh/switch-to-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))
#+END_SRC

*** todo Keywords, states, selection, triggers

#+header: :tangle yes
#+begin_src emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE"))))

;;(setq org-todo-keyword-faces
;;      (quote (("TODO" :foreground "red" :weight bold)
;;              ("NEXT" :foreground "blue" :weight bold)
;;              ("DONE" :foreground "forest green" :weight bold)
;;              ("WAITING" :foreground "orange" :weight bold)
;;              ("HOLD" :foreground "magenta" :weight bold)
;;              ("CANCELLED" :foreground "forest green" :weight bold)
;;              ("PHONE" :foreground "forest green" :weight bold))))

(setq org-use-fast-todo-selection t)
;(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING" . t) ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC

*** Org Capture settings

#+header: :tangle yes
#+begin_src emacs-lisp
(setq org-directory "~/Documents/org")
(setq org-default-notes-file "~/Documents/org/inbox.org")

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Documents/org/inbox.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/Documents/org/inbox.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/Documents/org/inbox.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/Documents/org/journal.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/Documents/org/inbox.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("p" "Phone call" entry (file "~/Documents/org/inbox.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/Documents/org/inbox.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

;; Remove empty LOGBOOK drawers on clock out
(defun bh/remove-empty-drawer-on-clock-out ()
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at "LOGBOOK" (point))))

(add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)


#+END_SRC

*** Refile settings

#+header: :tangle yes
#+begin_src emacs-lisp
  ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
  
  ; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path t)
  
  ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)
  
  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  
  ; Use IDO for both buffer and file completion and ido-everywhere to t
  (setq org-completion-use-ido t)
  (setq ido-everywhere t)
  (setq ido-max-directory-size 100000)
  (ido-mode (quote both))
  
  ;;;; Refile settings
  ; Exclude DONE state tasks from refile targets
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC
*** Creating a block agenda viewer

#+header: :tangle yes
#+begin_src emacs-lisp
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)
  
  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
  
  ;; Custom agenda command definitions
  (setq org-agenda-custom-commands
        (quote (("N" "Notes" tags "NOTE"
                 ((org-agenda-overriding-header "Notes")
                  (org-tags-match-list-sublevels t)))
                ("h" "Habits" tags-todo "STYLE=\"habit\""
                 ((org-agenda-overriding-header "Habits")
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                (" " "Agenda"
                 ((agenda "" nil)
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                  (tags-todo "-WAITING-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header "Next Tasks")
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-agenda-todo-ignore-scheduled t)
                              (org-agenda-todo-ignore-deadlines t)
                              (org-agenda-todo-ignore-with-date t)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                             ((org-agenda-overriding-header "Tasks")
                              (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                              (org-agenda-todo-ignore-scheduled t)
                              (org-agenda-todo-ignore-deadlines t)
                              (org-agenda-todo-ignore-with-date t)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED+WAITING/!"
                             ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                              (org-agenda-skip-function 'bh/skip-stuck-projects)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled 'future)
                              (org-agenda-todo-ignore-deadlines 'future)))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil)
                ("r" "Tasks to Refile" tags "REFILE"
                 ((org-agenda-overriding-header "Tasks to Refile")
                  (org-tags-match-list-sublevels nil)))
                ("#" "Stuck Projects" tags-todo "-CANCELLED/!"
                 ((org-agenda-overriding-header "Stuck Projects")
                  (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                ("n" "Next Tasks" tags-todo "-WAITING-CANCELLED/!NEXT"
                 ((org-agenda-overriding-header "Next Tasks")
                  (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                  (org-agenda-todo-ignore-scheduled t)
                  (org-agenda-todo-ignore-deadlines t)
                  (org-agenda-todo-ignore-with-date t)
                  (org-tags-match-list-sublevels t)
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                ("R" "Tasks" tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                 ((org-agenda-overriding-header "Tasks")
                  (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                  (org-agenda-sorting-strategy
                   '(category-keep))))
                ("p" "Projects" tags-todo "-HOLD-CANCELLED/!"
                 ((org-agenda-overriding-header "Projects")
                  (org-agenda-skip-function 'bh/skip-non-projects)
                  (org-agenda-sorting-strategy
                   '(category-keep))))
                ("w" "Waiting Tasks" tags-todo "-CANCELLED+WAITING/!"
                 ((org-agenda-overriding-header "Waiting and Postponed tasks"))
                 (org-tags-match-list-sublevels nil))
                ("A" "Tasks to Archive" tags "-REFILE/"
                 ((org-agenda-overriding-header "Tasks to Archive")
                  (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                  (org-tags-match-list-sublevels nil))))))
#+end_src

*** Tags
Here are my tag definitions with associated keys for filtering in the
agenda views.

The startgroup - endgroup (=@XXX=) tags are mutually exclusive -
selecting one removes a similar tag already on the task.  These are
the context tags - you can't be in two places at once so if a task is
marked with @farm and you add @office then the @farm tag is removed
automagically.

The other tags =PHONE= .. =FLAGGED= are not mutually exclusive and
multiple tags can appear on a single task.  Some of those tags are
created by todo state change triggers.  The shortcut key is used to
add or remove the tag using =C-c C-q= or to apply the task for
filtering on the agenda.

I have both =FARM= and =@farm= tags.  =FARM= is set by a =FILETAGS=
entry and just gives me a way to filter anything farm related.  The
=@farm= tag signifies that the task as to be done /at the farm/.  If I
have to call someone about something that would have a =FARM= tag but
I can do that at home on my lunch break.  I don't physically have to
be at the farm to make the call.

#+header: :tangle yes
#+begin_src emacs-lisp
  ; Tags with fast selection keys
  (setq org-tag-alist (quote ((:startgroup)
                              ("@errand" . ?e)
                              ("@office" . ?o)
                              ("@home" . ?h)
                              (:endgroup)
                              ("PHONE" . ?P)
                              ("WAITING" . ?W)
                              ("HOLD" . ?H)
                              ("PERSONAL" . ?p)
                              ("WORK" . ?w)
                              ("ORG" . ?o)
                              ("CPOILE" . ?C)
                              ("STARTUP-PROJECT" . ?s)
                              ("RESEARCH" . ?r)
                              ("crypt" . ?E)
                              ("MARK" . ?M)
                              ("NOTE" . ?n)
                              ("CANCELLED" . ?c)
                              ("FLAGGED" . ??))))
  
  ; Allow setting single tags without the menu
  (setq org-fast-tag-selection-single-key (quote expert))
  
  ; For tag searches ignore tasks with scheduled and deadline dates
  (setq org-agenda-tags-todo-honor-ignore-options t)
#+end_src

*** GTD settings
The first day of the week (usually Monday) I do my weekly review. 
I keep a list like this one to remind me what needs to be done.

To keep the agenda fast I set
#+header: :tangle yes
#+begin_src emacs-lisp
  (setq org-agenda-span 'day)
#+end_src
so only today's date is shown by default.  I only need the weekly
view during my weekly review and this keeps my agenda generation
fast.

I'm using a new lazy project definition to mark tasks as projects.
This requires zero effort from me.  Any task with a subtask using a
todo keyword is a project.  Period.

Projects are 'stuck' if they have no subtask with a =NEXT= todo
keyword task defined.

The org-mode stuck projects agenda view lists projects that have no
=NEXT= task defined.  Stuck projects show up on my block agenda and I
tend to assign a =NEXT= task so the list remains empty.  This helps to
keep projects moving forward.

I disable the default org-mode stuck projects agenda view with the
following setting.

#+header: :tangle yes
#+begin_src emacs-lisp
(setq org-stuck-projects (quote ("" nil nil "")))
#+end_src

This prevents org-mode from trying to show incorrect data if I select
the default stuck project view with =F12 #= from the agenda menu.  My
customized stuck projects view is part of my block agenda displayed
with =F12 a=.

Projects can have subprojects - and these subprojects can also be stuck.
Any project that is stuck shows up on the stuck projects list so I can
indicate or create a =NEXT= task to move that project forward.

All of the stuck projects and subprojects show up in the stuck
projects list and that is my indication to assign or create =NEXT=
tasks until the stuck projects list is empty.  Occasionally some
subtask is =WAITING= for something and the project is stuck until that
condition is satisfied.  In this case I leave it on the stuck project
list and just work on something else.  This stuck project 'bugs' me
regularly when I see it on the block agenda and this prompts me to
follow up on the thing that I'm waiting for.

I have the following helper functions defined for projects which are
used by agenda views.
#+header: :tangle yes
#+begin_src emacs-lisp
(defun bh/is-project-p ()
  "Any task with a todo keyword subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task has-subtask))))

(defun bh/is-project-subtree-p ()
  "Any task with a todo keyword that is in a project subtree.
Callers of this function already widen the buffer view."
  (let ((task (save-excursion (org-back-to-heading 'invisible-ok)
                              (point))))
    (save-excursion
      (bh/find-project-task)
      (if (equal (point) task)
          nil
        t))))

(defun bh/is-task-p ()
  "Any task with a todo keyword and no subtask"
  (save-restriction
    (widen)
    (let ((has-subtask)
          (subtree-end (save-excursion (org-end-of-subtree t)))
          (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
      (save-excursion
        (forward-line 1)
        (while (and (not has-subtask)
                    (< (point) subtree-end)
                    (re-search-forward "^\*+ " subtree-end t))
          (when (member (org-get-todo-state) org-todo-keywords-1)
            (setq has-subtask t))))
      (and is-a-task (not has-subtask)))))

(defun bh/is-subproject-p ()
  "Any task which is a subtask of another project"
  (let ((is-subproject)
        (is-a-task (member (nth 2 (org-heading-components)) org-todo-keywords-1)))
    (save-excursion
      (while (and (not is-subproject) (org-up-heading-safe))
        (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
          (setq is-subproject t))))
    (and is-a-task is-subproject)))

(defun bh/list-sublevels-for-projects-indented ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels 'indented)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/list-sublevels-for-projects ()
  "Set org-tags-match-list-sublevels so when restricted to a subtree we list all subtasks.
  This is normally used by skipping functions where this variable is already local to the agenda."
  (if (marker-buffer org-agenda-restrict-begin)
      (setq org-tags-match-list-sublevels t)
    (setq org-tags-match-list-sublevels nil))
  nil)

(defun bh/skip-stuck-projects ()
  "Skip trees that are not stuck projects"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                nil
              next-headline)) ; a stuck project, has subtasks but no next task
        nil))))

(defun bh/skip-non-stuck-projects ()
  "Skip trees that are not stuck projects"
  (bh/list-sublevels-for-projects-indented)
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (if (bh/is-project-p)
          (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
                 (has-next ))
            (save-excursion
              (forward-line 1)
              (while (and (not has-next) (< (point) subtree-end) (re-search-forward "^\\*+ NEXT " subtree-end t))
                (unless (member "WAITING" (org-get-tags-at))
                  (setq has-next t))))
            (if has-next
                next-headline
              nil)) ; a stuck project, has subtasks but no next task
        next-headline))))

(defun bh/skip-non-projects ()
  "Skip trees that are not projects"
  (bh/list-sublevels-for-projects-indented)
  (if (save-excursion (bh/skip-non-stuck-projects))
      (save-restriction
        (widen)
        (let ((subtree-end (save-excursion (org-end-of-subtree t))))
          (cond
           ((and (bh/is-project-p)
                 (marker-buffer org-agenda-restrict-begin))
            nil)
           ((and (bh/is-project-p)
                 (not (marker-buffer org-agenda-restrict-begin))
                 (not (bh/is-project-subtree-p)))
            nil)
           (t
            subtree-end))))
    (save-excursion (org-end-of-subtree t))))

(defun bh/skip-project-trees-and-habits ()
  "Skip trees that are projects"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits-and-single-tasks ()
  "Skip trees that are projects, tasks that are habits, single non-project tasks"
  (save-restriction
    (widen)
    (let ((next-headline (save-excursion (or (outline-next-heading) (point-max)))))
      (cond
       ((org-is-habit-p)
        next-headline)
       ((bh/is-project-p)
        next-headline)
       ((and (bh/is-task-p) (not (bh/is-project-subtree-p)))
        next-headline)
       (t
        nil)))))

(defun bh/skip-project-tasks-maybe ()
  "Show tasks related to the current restriction.
When restricted to a project, skip project and sub project tasks, habits, NEXT tasks, and loose tasks.
When not restricted, skip project and sub-project tasks, habits, and project related tasks."
  (save-restriction
    (widen)
    (let* ((subtree-end (save-excursion (org-end-of-subtree t)))
           (next-headline (save-excursion (or (outline-next-heading) (point-max))))
           (limit-to-project (marker-buffer org-agenda-restrict-begin)))
      (cond
       ((bh/is-project-p)
        next-headline)
       ((org-is-habit-p)
        subtree-end)
       ((and (not limit-to-project)
             (bh/is-project-subtree-p))
        subtree-end)
       ((and limit-to-project
             (bh/is-project-subtree-p)
             (member (org-get-todo-state) (list "NEXT")))
        subtree-end)
       (t
        nil)))))

(defun bh/skip-projects-and-habits ()
  "Skip trees that are projects and tasks that are habits"
  (save-restriction
    (widen)
    (let ((subtree-end (save-excursion (org-end-of-subtree t))))
      (cond
       ((bh/is-project-p)
        subtree-end)
       ((org-is-habit-p)
        subtree-end)
       (t
        nil)))))

(defun bh/skip-non-subprojects ()
  "Skip trees that are not projects"
  (let ((next-headline (save-excursion (outline-next-heading))))
    (if (bh/is-subproject-p)
        nil
      next-headline)))
#+end_src

*** Next keyword setting
#+BEGIN_QUOTE
=NEXT= keywords are for *tasks* and not *projects*.  I've added a
function to the todo state change hook and clock in hook so that any
parent tasks marked =NEXT= automagically change from =NEXT= to =TODO=
since they are now projects and not tasks.
#+END_QUOTE 

#+header: :tangle yes
#+begin_src emacs-lisp
  (defun bh/mark-next-parent-tasks-todo ()
    "Visit each parent task and change NEXT states to TODO"
    (let ((mystate (or (and (fboundp 'org-state)
                            state)
                       (nth 2 (org-heading-components)))))
      (when (equal mystate "NEXT")
        (save-excursion
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) (list "NEXT"))
              (org-todo "TODO")))))))
  
  (add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
  (add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)
#+end_src

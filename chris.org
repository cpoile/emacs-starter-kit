#+TITLE: Local User Customizations
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit cpoile (adapted from kjhealy)
This file contains very local customizations---ones that in some cases
you will not be able to just drop in and use because, e.g., they
involve references to particular files on my own machine. It's
included here for completeness, and as and example of the kind of
things you might put in your own user-specific file.

To use the customizations here yourself, /you must change the name of
 this file to match your own user name or system name/. Those are the
 values of the Emacs variables =user-login-name= or =system-name=, so
 that it will be picked up by =init.el= when Emacs starts up, and get
 loaded properly. To find the current value of these variables on your
 system, launch emacs and do =C-h-v system-name [RET]= or =C-h-v
 user-login-name [RET]=. For example, on my system =user-login-name=
 is 'kjhealy', so this file is named =kjhealy.org=, and when Emacs
 starts up with the starter kit it creates the file =kjhealy.el=.
 
You will also need to change the values for the location of bibtex
 databases, pandoc and orgmode-mobile specified below, and some other
 settings. *Search for 'kjhealy' in this file* to find the paths that
 need to be updated. Change them as needed or delete them if you don't
 need these features. 

Finally, the [[*Local%20Org-mode%20XeLaTeX%20Export%20Settings][Local Org-mode XeLaTeX Export Settings]] section below has
 references to fonts that you may not have available on your
 system. Change the references as appropriate, or comment out or
 delete the lines.

** Local Miscellaneous Settings
*** Color Theme Tweaks
The theme package is loaded in =starter-kit-misc.org=. The settings
here adjust the height of some headings in Org and LaTeX mode, as well
as turning off the sans-serif heading style that AucTeX defaults to.

#+srcname: local-settings
#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook 
            (lambda ()
              (set-face-attribute 'font-latex-sectioning-5-face nil :inherit nil :foreground "#b58900")
              (set-face-attribute 'font-latex-sectioning-0-face nil :height 3)
              (set-face-attribute 'font-latex-sectioning-1-face nil :height 2)
              ;;(set-face-attribute 'font-latex-sectioning-2-face nil :height 1.5)
              ;;(set-face-attribute 'font-latex-sectioning-3-face nil :height 1.2)
              ;;(set-face-attribute 'font-latex-sectioning-4-face nil :height 1.0)
              ))
  
  (add-hook 'org-mode-hook 
             (lambda ()
               (set-face-attribute 'org-level-1 nil :height 1.1 :weight 'bold)
               (set-face-attribute 'org-level-2 nil :height 1.1 :weight 'bold)
               ;;(set-face-attribute 'org-level-3 nil :height 1.1)
               ;;(set-face-attribute 'org-level-4 nil :height 1.1)
               ;;(set-face-attribute 'org-level-5 nil :height 1.1)
               ))
#+end_src

*** Run Emacs in Full Screen
  I find it very useful to run Emacs in full-screen mode. There is no
    completely satisfactory way to accomplish this on Mac OS X. What
    works depends on the flavor of emacs you are using,
    unfortunately. Choose as appropriate from the following options:

**** Option 1
Require maxframe package to conveniently maxmimize the window. Doesn't work with Emacs 23 on Mac.

#+srcname: fullscreen-1
#+begin_src emacs-lisp 
  (require 'maxframe)
  ;(global-set-key (kbd "C-c m") 'x-maximize-frame) 
  (add-hook 'window-setup-hook 'maximize-frame t)
#+end_src

**** Option 2
Fullscreen toggle -- Only works with the (now slightly out-of-date)
patched emacs build at =git://github.com/typester/emacs.git=.

#+source: fullscreen-2
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-c m") 'ns-toggle-fullscreen)
#+end_src

**** Option 3  
Fullscreen toggle using maxframe.el. 
#+source: fullscreen-3
#+begin_src emacs-lisp :tangle no
  
 (require 'maxframe)
 (defvar my-fullscreen-p t "Check if fullscreen is on or off")
 (defun my-toggle-fullscreen ()
 (interactive)
 (setq my-fullscreen-p (not my-fullscreen-p))
 (if my-fullscreen-p
 (restore-frame)
 (maximize-frame)))
 (global-set-key (kbd "C-c f") 'my-toggle-fullscreen)    
#+end_src

**** Option 4
For use with Yamamoto Mitsuharu's Carbon-patched Emacs. (This is
    what I use, but it requires you compile a custom Emacs.)

#+source: fullscreen-4
#+begin_src emacs-lisp :tangle no
    (defun fullscreen (&optional f)
      (interactive)
      (set-frame-parameter f 'fullscreen
                           (if (frame-parameter f 'fullscreen) nil 'fullboth)))
    (global-set-key (kbd "C-c f") 'fullscreen)
    (add-hook 'after-make-frame-functions 'fullscreen)
#+end_src

**** Option 5  
Internal to emacs; also seems not to work on OS X.
#+source: fullscreen-5
#+begin_src emacs-lisp :tangle no
 (defun toggle-fullscreen (&optional f)
    (interactive)
    (let ((current-value (frame-parameter nil 'fullscreen)))
         (set-frame-parameter nil 'fullscreen
                              (if (equal 'fullboth current-value)
                                  (if (boundp 'old-fullscreen) old-fullscreen nil)
                                  (progn (setq old-fullscreen current-value)
                                         'fullboth)))))
  (global-set-key (kbd "C-c f") 'toggle-fullscreen)  
#+end_src
    
*** Mac Key mode
    Used with Mitsuharu Yamamoto's carbon-patched Emacs, which turns
    off support for default mac bindings. Turned off by default.
#+srcname: mac-keys
#+begin_src emacs-lisp :tangle no
   (require 'mac-key-mode)
   (mac-key-mode 1)
   (add-hook 'mac-key-mode-hook
       (lambda()
         (interactive)
         (if mac-key-mode
             (setq mac-option-modifier 'meta)
             (setq mac-option-modifier nil)
             )))
#+end_src

*** Dired-x
Dired extensions
#+source: Dired-x
#+begin_src emacs-lisp
  (load "dired-x")
#+end_src

*** Dired open multiple files
In dired mode, visit all marked files using. Bound to the "F" key. 
#+source: dired-F
#+begin_src emacs-lisp
  (eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+end_src

*** Stripe Dired buffers
#+name: stripe-dired
#+begin_src emacs-lisp :tangle no
(require 'stripe-buffer)
(add-hook 'org-mode-hook 'org-table-stripes-enable)
(add-hook 'dired-mode-hook 'stripe-listify-buffer)  
#+end_src

*** Recent Files setup
#+srcname: recentf-setup
#+begin_src emacs-lisp
 ;; save recent files
(setq recentf-save-file (expand-file-name "recentf" "~/.emacs.d/recentf/")
      recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode t)  
#+end_src

*** Editing tweaks
#+source: editing-tweaks
#+begin_src emacs-lisp
    ;; It's recommended to create a list of packages in init.el which will
    ;; be installed if they are found to not be present:
    ;; That way you can be ensured of a consistent experience across
    ;; machines.
    ;; (from: https://github.com/technomancy/emacs-starter-kit)
    
    ;; Highlight The Current line
    (global-hl-line-mode +1)
    
    (require 'volatile-highlights)
    (volatile-highlights-mode t)
    
    ;; Note - this should be after volatile-highlights is required
    ;; add the ability to copy and cut the current line, without marking it
    (defadvice kill-ring-save (before slick-copy activate compile)
      "When called interactively with no active region, copy a single line instead."
      (interactive
       (if mark-active (list (region-beginning) (region-end))
         (message "Copied line")
         (list (line-beginning-position)
               (line-beginning-position 2)))))
    
    (defadvice kill-region (before slick-cut activate compile)
      "When called interactively with no active region, kill a single line instead."
      (interactive
       (if mark-active (list (region-beginning) (region-end))
         (list (line-beginning-position)
               (line-beginning-position 2)))))
    
    (defun duplicate-current-line-or-region (arg)
    "Duplicates the current line or region ARG times.
  If there's no region, the current line will be duplicated. However, if
  there's a region, all lines that region covers will be duplicated."
    (interactive "p")
    (let (beg end (origin (point)))
      (if (and mark-active (> (point) (mark)))
          (exchange-point-and-mark))
      (setq beg (line-beginning-position))
      (if mark-active
          (exchange-point-and-mark))
      (setq end (line-end-position))
      (let ((region (buffer-substring-no-properties beg end)))
        (dotimes (i arg)
          (goto-char end)
          (newline)
          (insert region)
          (setq end (point)))
        (goto-char (+ origin (* (length region) arg) arg)))))
  
    (global-set-key (kbd "C-c d") 'duplicate-current-line-or-region)
      
    ;; I use single spaces between paragraphs, so I will have to put up with
    ;; "forward-sentence" picking up abbreviations and titles as sentence endings.
    (setq sentence-end-double-space nil)
    
    ;; emulate Intellij Idea's join lines command
    (defun pull-next-line() 
      (interactive) 
      (move-end-of-line 1) 
      (kill-line)
      (just-one-space))
    (global-unset-key (kbd "C-S-j"))
  (global-set-key (kbd "C-S-j") 'pull-next-line)
  #+end_src   

*** IntelliJ stlyle global back and forward mark

|---------------+------------------------------------------------------------|
| C-x C-<SPC>   | go back in `global-mark-ring`, respects prefix arg         |
| C-x C-<left>  | go back in `global-mark-ring`                              |
| C-x C-<right> | go forward in `global-mark-ring`                           |
|               |                                                            |
| C-x <SPC>     | go back in (buffer-local) `mark-ring`, respects prefix arg |
| C-x <left>    | go back in (buffer-local) `mark-ring`                      |
| C-x <right>   | go forward in (buffer-local) `mark-ring`                   |
|---------------+------------------------------------------------------------|

#+BEGIN_SRC emacs-lisp
  ;; get some IntelliJ-style back-forward movement between marks in a file, or globally
  (require 'smartrep)
  (require 'nav-flash)
  (nav-flash-show)
  (require 'visible-mark)
  (visible-mark-mode 1)
  (require 'back-button)
  (back-button-mode 1)
#+END_SRC

*** Undo tree
#+source: editing-tweaks
#+begin_src emacs-lisp
  ;; Add undo-tree. Be sure to read how to use it.
  ;; C-_  C-/  (`undo-tree-undo')
  ;;   Undo changes.
  ;;
  ;; M-_  C-?  (`undo-tree-redo')
  ;;   Redo changes.
  ;;
  ;; `undo-tree-switch-branch'
  ;;   Switch undo-tree branch.
  ;;   (What does this mean? Better press the button and see!)
  ;;
  ;; C-x u  (`undo-tree-visualize')
  ;;   Visualize the undo tree.
  ;;   (Better try pressing this button too!)
  ;;
  ;; C-x r u  (`undo-tree-save-state-to-register')
  ;;   Save current buffer state to register.
  ;;
  ;; C-x r U  (`undo-tree-restore-state-from-register')
  ;;   Restore buffer state from register.
  (require 'undo-tree)
  (global-undo-tree-mode)
    
#+end_src

*** Scrolling
#+source: smooth-scroling
#+begin_src emacs-lisp
  ; these two commands allow smooth scrolling while keeping the cursor still
  ; use C-, to scroll up, C-. to scroll down
  ; author: Petr Glotov
  
  (defun scroll-one-down ()
    (interactive)
    (scroll-down 1)
    ;;(previous-line)
    )
  
  (defun scroll-one-up ()
    (interactive)
    (scroll-up 1)
    ;;(next-line)
    )
  (global-unset-key (kbd "C-,"))
  (add-hook 'org-mode-hook '(lambda () (local-unset-key (kbd "C-,"))))
  (global-set-key (kbd "C-,") 'scroll-one-down)
  (global-set-key (kbd "C-.") 'scroll-one-up)  
#+end_src

*** Display Tweaks / Transparency
#+source: display-tweaks
#+begin_src emacs-lisp
  (setq default-cursor-type '(bar . 3))
  (setq default-cursor-in-non-selected-windows 'hollow-box)
  
   ;;(set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
   ;; (set-frame-parameter (selected-frame) 'alpha '(90 50))
   ;;  (add-to-list 'default-frame-alist '(alpha 90 50))
  
   ;; after you’ve set the alpha as above to assign a toggle to “C-c t”
  (eval-when-compile (require 'cl))
  (defun toggle-transparency ()
    (interactive)
    (if (/=
         (cadr (frame-parameter nil 'alpha))
         100)
        (set-frame-parameter nil 'alpha '(100 100))
      (set-frame-parameter nil 'alpha '(90 50))))
  (global-set-key (kbd "C-c t") 'toggle-transparency)
  
  (setq scroll-bar-mode nil)
#+end_src
*** Autosave
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t      ; don't clobber symlinks
   delete-old-versions t
   kept-new-versions 100
   ;;kept-old-versions 20
   version-control t       ; use versioned backups
   vc-make-backup-files t
   auto-save-interval 20
   auto-save-timeout 15)
  
  ;; create the autosave dir if necessary, since emacs won't.
  (make-directory "~/Documents/.autosaves/" t)
  (setq backup-directory-alist
        `((".*" . "~/Documents/.autosaves")))
  (setq auto-save-file-name-transforms
        `((".*" "~/Documents/.autosaves/\\2" t)))
  
  ;; always backup.
  (defun force-backup-of-buffer ()
    (setq buffer-backed-up nil))
  
  (add-hook 'before-save-hook  'force-backup-of-buffer)
#+END_SRC
*** Workgroups
#+begin_src emacs-lisp
  (require 'workgroups)
  (setq wg-prefix-key (kbd "C-c w"))
  (workgroups-mode 1)
  (wg-load "~/Documents/Emacs - setup - reference/workgroups/workgroups")
#+end_src
*** Use ido-imenu to search local tags
    From: http://www.masteringemacs.org/articles/2011/01/14/effective-editing-movement/ which referenced: http://www.emacswiki.org/emacs/ImenuMode#toc10

#+BEGIN_SRC emacs-lisp
 (defun ido-goto-symbol (&optional symbol-list)
      "Refresh imenu and jump to a place in the buffer using Ido."
      (interactive)
      (unless (featurep 'imenu)
        (require 'imenu nil t))
      (cond
       ((not symbol-list)
        (let ((ido-mode ido-mode)
              (ido-enable-flex-matching
               (if (boundp 'ido-enable-flex-matching)
                   ido-enable-flex-matching t))
              name-and-pos symbol-names position)
          (unless ido-mode
            (ido-mode 1)
            (setq ido-enable-flex-matching t))
          (while (progn
                   (imenu--cleanup)
                   (setq imenu--index-alist nil)
                   (ido-goto-symbol (imenu--make-index-alist))
                   (setq selected-symbol
                         (ido-completing-read "Symbol? " symbol-names))
                   (string= (car imenu--rescan-item) selected-symbol)))
          (unless (and (boundp 'mark-active) mark-active)
            (push-mark nil t nil))
          (setq position (cdr (assoc selected-symbol name-and-pos)))
          (cond
           ((overlayp position)
            (goto-char (overlay-start position)))
           (t
            (goto-char position)))))
       ((listp symbol-list)
        (dolist (symbol symbol-list)
          (let (name position)
            (cond
             ((and (listp symbol) (imenu--subalist-p symbol))
              (ido-goto-symbol symbol))
             ((listp symbol)
              (setq name (car symbol))
              (setq position (cdr symbol)))
             ((stringp symbol)
              (setq name symbol)
              (setq position
                    (get-text-property 1 'org-imenu-marker symbol))))
            (unless (or (null position) (null name)
                        (string= (car imenu--rescan-item) name))
              (add-to-list 'symbol-names name)
              (add-to-list 'name-and-pos (cons name position))))))))
    (global-set-key "\C-ci" 'ido-goto-symbol) ; or any key you see fit
#+END_SRC
*** Custom misc keymaps
#+source: custom-keymaps
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "<C-f4>") 'kill-current-buffer)
#+end_src

*** Flyspell
#+begin_src emacs-lisp
    ;; Flyspell mode in org-mode
    ;(add-hook 'org-mode-hook 'enable-flyspell)
    
    ;; recognize latex code as something that is not mispelled
    ;;(add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
  
  ;; easy spell check
  (global-set-key (kbd "C-<f7>") 'ispell-word)
  (global-set-key (kbd "C-S-<f7>") 'flyspell-mode)
  (global-set-key (kbd "S-<f7>") 'flyspell-buffer)
  (global-set-key (kbd "M-S-<f7>") 'flyspell-check-previous-highlighted-word)
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word)
    )
  (global-set-key (kbd "M-<f7>") 'flyspell-check-next-highlighted-word)
#+end_src

** Load my custom Org-Mode settings
Located: [[file:my-org-mode-setup.org
]]
#+source: load-org-mode-settings
#+begin_src emacs-lisp
  (starter-kit-load "my-org-mode-setup.org")
#+end_src

** Local LaTeX settings
*** In-text Smart Quotes (XeLaTeX only)
    Redefine TeX-open-quote and TeX-close-quote to be smart quotes by default. Below, in the local org-mode settings, we'll also map the relevant function to a key we can use in org-mode, too. If you don't use XeLaTeX for processing all your =.tex= files, you should disable this option.

#+source: smart-quotes
#+begin_src emacs-lisp :tangle no
  (setq TeX-open-quote "“")
  (setq TeX-close-quote "”")
#+end_src

*** SyncTeX, PDF mode, Skim
Set up AUCTeX to work with the Skim PDF viewer.

#+srcname: local-loadpath
#+begin_src emacs-lisp :tangle no
   ;; Synctex with Skim
   ;;(add-hook 'TeX-mode-hook
   ;;(lambda ()
   ;;(add-to-list 'TeX-output-view-style
   ;;'("^pdf$" "."
   ;; "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b")))
   ;; )

   ;; Make emacs aware of multi-file projects
   ;; (setq-default TeX-master nil)

   ;; Auto-raise Emacs on activation (from Skim, usually)
   (defun raise-emacs-on-aqua()
   (shell-command "osascript -e 'tell application \"Emacs\" to activate' &"))
   (add-hook 'server-switch-hook 'raise-emacs-on-aqua)
#+end_src

*** Local RefTeX Settings
Tell RefTeX where the bibliography files are. 

#+srcname: local-reftex
#+begin_src emacs-lisp  
  ;; Make RefTex able to find my local bib files
  (setq reftex-bibpath-environment-variables
        '("~/Documents/TeX-bibs"))
  
  ;; Default bibliography
  (setq reftex-default-bibliography
  '("~/Documents/TeX-bibs/ob-mis.bib"))
  
  
  ;; CDLaTex minor mode: tab-trigger environments, paired paren
  ;; insertion, etc
  ;; (autoload 'cdlatex-mode "cdlatex" "CDLaTeX Mode" t)
  ;; (autoload 'turn-on-cdlatex "cdlatex" "CDLaTeX Mode" nil)
  ;; (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX
  ;;                                         ; mode
  
  ;; set which characters are autopaired // Doesn't work. Set in custom, below.
  ;; (add-hook 'cdlatex-mode-hook
  ;;   (function (lambda ()
  ;;               (setq cdlatex-paired-parens
  ;;                     '("$[{("))
  ;;             )))
#+end_src

*** Local vc commands
    Run the vc shellscript before running xelatex with C-c c (instead
    of C-c C-c for regular compile). This assumes you're using the VC
    LaTeX package, have vc in your path, and have vc-awk in the
    directory you're working in.

#+srcname: vc-command
#+begin_src emacs-lisp
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex);; Run the VC command before running xelatex
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex)
#+end_src

    Or just run vc alone --- this is useful when writing LaTeX files
    using org-mode. (See the org-mode customizations below).

#+source: vc-alone
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c v")
                      (lambda ()
                        (interactive)
                        (shell-command "vc.sh")))

#+end_src

** Local Pandoc Support 
#+src-name: pandoc_mode
#+begin_src emacs-lisp 
 (load "pandoc-mode")
 (add-hook 'markdown-mode-hook 'turn-on-pandoc)
 (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+end_src

** Local iBuffer Settings
   Manage a lot of buffers easily with C-x C-b. Already set up
   elsewhere in the starter kit. Add local configuration here, e.g.,
   display categories.
#+srcname: iBuffer-custom
#+begin_src emacs-lisp 
  (setq ibuffer-saved-filter-groups
      '(("home"
	 ("emacs-config" (or (filename . ".emacs.d")
			     (filename . "emacs-config")))
	 ("Org" (or (mode . org-mode)
		    (filename . "OrgMode")))
	 ("Web Dev" (or (mode . html-mode)
			(mode . css-mode)))
	 ("Magit" (name . "\*magit"))
	 ("ESS" (mode . ess-mode))
         ("LaTeX" (mode . latex-mode))
	 ("Help" (or (name . "\*Help\*")
		     (name . "\*Apropos\*")
		     (name . "\*info\*"))))))

        (add-hook 'ibuffer-mode-hook 
	             '(lambda ()
	             (ibuffer-switch-to-saved-filter-groups "home")))
       (setq ibuffer-show-empty-filter-groups nil)                     
       (setq ibuffer-expert t)
       (add-hook 'ibuffer-mode-hook 
       '(lambda ()
       (ibuffer-auto-mode 1)
       (ibuffer-switch-to-saved-filter-groups "home")))
#+end_src

** Pomodoro
*** Setup
#+BEGIN_SRC emacs-lisp
  (require 'pomodoro)
  (pomodoro-add-to-mode-line)
#+END_SRC
** Auto-complete mode
   Powerful autocompletion; experimentally added. Will pop-up
   autocomplete suggestions as you type; hit =TAB= to complete, or
   choose from the menu of options.

#+source: auto-complete
#+begin_src emacs-lisp
  ;; compile it if the .el file is newer 
  ;;(byte-recompile-directory "~/.emacs.d/src/auto-complete")
  ;;(byte-recompile-directory "~/.emacs.d/src/auto-complete/dict/ess")
  (require 'auto-complete)
  (require 'auto-complete-config)
  (global-auto-complete-mode t)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/src/auto-complete/dict")
  (setq ac-modes (append ac-modes '(org-mode))) 
  (ac-config-default)
  (define-key ac-complete-mode-map [tab] 'ac-expand)
  ;;(require 'ac-R)
  (setq ac-auto-start 4)
  (ac-flyspell-workaround)
  (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  (setq ac-auto-show-menu 0.8)
  (define-key ac-completing-map (kbd "M-h") 'ac-quick-help)
  ;; 
  
  ;;(set-face-background 'ac-candidate-face "#366060")
  ;;(set-face-foreground 'ac-selection-face "#1f1f1f")
  ;;(set-face-background 'ac-selection-face "#8cd0d3")
  ;;(set-face-foreground 'ac-selection-face "#1f1f1f")
  
#+end_src

*** IRC
Sometimes useful for getting help on R or Emacs. 
#+source: rirc-configuration
#+begin_src emacs-lisp
  ;; connect to irc on invocation but don't autojoin any channels
  (require 'rcirc)
  (add-to-list 'rcirc-server-alist
                       '("irc.freenode.net"))
#+end_src

*** Final Custom elements
Some last tweaks. 

#+#+BEGIN_SRC 

#+END_SRC
name: final-custom
#+begin_src emacs-lisp
  ;; minimize fringe
  (setq-default indicate-empty-lines nil)
  
  ;; Add keybindings for commenting regions of text
  (global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)
  (global-set-key (kbd "M-'") 'comment-or-uncomment-region)
  
  ;; Base dir
  (cd "~/")
  
  ;; custom variables kludge. Why can't I get these to work via setq?
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(LaTeX-XeTeX-command "xelatex -synctex=1")
  '(TeX-engine (quote xetex))
  '(TeX-view-program-list (quote (("AdobeReader" "/Program Files (x86)/Adobe/Acrobat 9.0/Acrobat %n %o %b"))))
  '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "AdobeReader") (output-html "xdg-open"))))
  '(show-paren-mode t)
  '(blink-cursor-mode nil)
  '(text-mode-hook (quote (text-mode-hook-identify)))
  )
#+end_src
    
** ESS
*** Set ESS mode
#+begin_src emacs-lisp
  (defun ess-set-language ()
    (setq-default ess-language "R")
    (setq ess-language "R")
    )
  
  (add-hook 'ess-post-run-hook 'ess-set-language t)
  (if (equal user-login-name "Chris")
      (setq inferior-R-program-name "c:/Program Files/R/R-2.15.2/bin/x64/Rterm.exe")
    (setq inferior-R-program-name "d:/R/R-2.15.2/bin/x64/Rterm.exe"))
  
  (add-hook 'ess-mode-hook '(lambda () (setq fill-column 100)))
 
#+end_src

** Clojure / Paredit
*** Keybindings
#+source: paredit-keybindings
#+begin_src language
  
#+end_src
#+source: paredit-keybindings
#+begin_src emacs-lisp
    ;; override the default keybindings in paredit
  (eval-after-load 'paredit
    '(progn
       (define-key paredit-mode-map (kbd "<M-right>") 'paredit-forward-slurp-sexp)
       (define-key paredit-mode-map (kbd "<M-left>")  'paredit-forward-barf-sexp)
       (define-key paredit-mode-map (kbd "<C-right>") 'paredit-forward)
       (define-key paredit-mode-map (kbd "<C-left>")  'paredit-backward)))
#+end_src
*** Remove '^M' dos eol characters
In mixed dos/unix files and buffers (like NRepl)
#+source: remove-^M
#+begin_src emacs-lisp
  (defun remove-dos-eol ()
    "Do not show ^M in files containing mixed UNIX and DOS line endings."
    (interactive)
    (setq buffer-display-table (make-display-table))
    (aset buffer-display-table ?\^M []))
  
  (add-hook 'nrepl-mode-hook 'remove-dos-eol)
  (add-hook 'nrepl-connections-buffer-mode-hook 'remove-dos-eol)
#+end_src
*** nrepl settings
#+source: nrepl-settings
#+begin_src emacs-lisp
  (add-hook 'nrepl-interaction-mode-hook
            'nrepl-turn-on-eldoc-mode)
  ;(define-key nrepl-interaction-mode-map (kbd "C-c C-d") 'ac-nrepl-popup-doc)
#+end_src
** ERC
*** Ignore quit join part messages
They are annoying and push content off the screen.
#+source: erc-ignore
#+begin_src emacs-lisp
  (setq erc-hide-list '("JOIN" "PART" "QUIT"))
#+end_src

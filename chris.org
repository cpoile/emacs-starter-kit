#+TITLE: Local User Customizations
#+OPTIONS: toc:nil num:nil ^:nil

* Starter Kit cpoile (adapted from kjhealy)
This file contains very local customizations---ones that in some cases
you will not be able to just drop in and use because, e.g., they
involve references to particular files on my own machine. It's
included here for completeness, and as and example of the kind of
things you might put in your own user-specific file.

To use the customizations here yourself, /you must change the name of
 this file to match your own user name or system name/. Those are the
 values of the Emacs variables =user-login-name= or =system-name=, so
 that it will be picked up by =init.el= when Emacs starts up, and get
 loaded properly. To find the current value of these variables on your
 system, launch emacs and do =C-h-v system-name [RET]= or =C-h-v
 user-login-name [RET]=. For example, on my system =user-login-name=
 is 'kjhealy', so this file is named =kjhealy.org=, and when Emacs
 starts up with the starter kit it creates the file =kjhealy.el=.
 
You will also need to change the values for the location of bibtex
 databases, pandoc and orgmode-mobile specified below, and some other
 settings. *Search for 'kjhealy' in this file* to find the paths that
 need to be updated. Change them as needed or delete them if you don't
 need these features. 

Finally, the [[*Local%20Org-mode%20XeLaTeX%20Export%20Settings][Local Org-mode XeLaTeX Export Settings]] section below has
 references to fonts that you may not have available on your
 system. Change the references as appropriate, or comment out or
 delete the lines.

** Local Miscellaneous Settings
*** Color Theme Tweaks
The theme package is loaded in =starter-kit-misc.org=. The settings
here adjust the height of some headings in Org and LaTeX mode, as well
as turning off the sans-serif heading style that AucTeX defaults to.

#+srcname: local-settings
#+begin_src emacs-lisp
  (add-hook 'latex-mode-hook 
            (lambda ()
              (set-face-attribute 'font-latex-sectioning-5-face nil :inherit nil :foreground "#b58900")
              (set-face-attribute 'font-latex-sectioning-0-face nil :height 3)
              (set-face-attribute 'font-latex-sectioning-1-face nil :height 2)
              ;;(set-face-attribute 'font-latex-sectioning-2-face nil :height 1.5)
              ;;(set-face-attribute 'font-latex-sectioning-3-face nil :height 1.2)
              ;;(set-face-attribute 'font-latex-sectioning-4-face nil :height 1.0)
              ))
  
  (add-hook 'org-mode-hook 
             (lambda ()
               (set-face-attribute 'org-level-1 nil :height 1.5)
               (set-face-attribute 'org-level-2 nil :height 1.2)
               ;;(set-face-attribute 'org-level-3 nil :height 1.1)
               ;;(set-face-attribute 'org-level-4 nil :height 1.1)
               ;;(set-face-attribute 'org-level-5 nil :height 1.1)
               ))
#+end_src

*** Run Emacs in Full Screen
  I find it very useful to run Emacs in full-screen mode. There is no
    completely satisfactory way to accomplish this on Mac OS X. What
    works depends on the flavor of emacs you are using,
    unfortunately. Choose as appropriate from the following options:

**** Option 1
Require maxframe package to conveniently maxmimize the window. Doesn't work with Emacs 23 on Mac.

#+srcname: fullscreen-1
#+begin_src emacs-lisp 
  (require 'maxframe)
  ;(global-set-key (kbd "C-c m") 'x-maximize-frame) 
  (add-hook 'window-setup-hook 'maximize-frame t)
#+end_src

**** Option 2
Fullscreen toggle -- Only works with the (now slightly out-of-date)
patched emacs build at =git://github.com/typester/emacs.git=.

#+source: fullscreen-2
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "C-c m") 'ns-toggle-fullscreen)
#+end_src

**** Option 3  
Fullscreen toggle using maxframe.el. 
#+source: fullscreen-3
#+begin_src emacs-lisp :tangle no
  
 (require 'maxframe)
 (defvar my-fullscreen-p t "Check if fullscreen is on or off")
 (defun my-toggle-fullscreen ()
 (interactive)
 (setq my-fullscreen-p (not my-fullscreen-p))
 (if my-fullscreen-p
 (restore-frame)
 (maximize-frame)))
 (global-set-key (kbd "C-c f") 'my-toggle-fullscreen)    
#+end_src

**** Option 4
For use with Yamamoto Mitsuharu's Carbon-patched Emacs. (This is
    what I use, but it requires you compile a custom Emacs.)

#+source: fullscreen-4
#+begin_src emacs-lisp :tangle no
    (defun fullscreen (&optional f)
      (interactive)
      (set-frame-parameter f 'fullscreen
                           (if (frame-parameter f 'fullscreen) nil 'fullboth)))
    (global-set-key (kbd "C-c f") 'fullscreen)
    (add-hook 'after-make-frame-functions 'fullscreen)
#+end_src

**** Option 5  
Internal to emacs; also seems not to work on OS X.
#+source: fullscreen-5
#+begin_src emacs-lisp :tangle no
 (defun toggle-fullscreen (&optional f)
    (interactive)
    (let ((current-value (frame-parameter nil 'fullscreen)))
         (set-frame-parameter nil 'fullscreen
                              (if (equal 'fullboth current-value)
                                  (if (boundp 'old-fullscreen) old-fullscreen nil)
                                  (progn (setq old-fullscreen current-value)
                                         'fullboth)))))
  (global-set-key (kbd "C-c f") 'toggle-fullscreen)  
#+end_src
    
*** Mac Key mode
    Used with Mitsuharu Yamamoto's carbon-patched Emacs, which turns
    off support for default mac bindings. Turned off by default.
#+srcname: mac-keys
#+begin_src emacs-lisp :tangle no
   (require 'mac-key-mode)
   (mac-key-mode 1)
   (add-hook 'mac-key-mode-hook
       (lambda()
         (interactive)
         (if mac-key-mode
             (setq mac-option-modifier 'meta)
             (setq mac-option-modifier nil)
             )))
#+end_src

*** Dired-x
Dired extensions
#+source: Dired-x
#+begin_src emacs-lisp
  (load "dired-x")
#+end_src

*** Dired open multiple files
In dired mode, visit all marked files using. Bound to the "F" key. 
#+source: dired-F
#+begin_src emacs-lisp
  (eval-after-load "dired"
  '(progn
     (define-key dired-mode-map "F" 'my-dired-find-file)
     (defun my-dired-find-file (&optional arg)
       "Open each of the marked files, or the file under the point, or when prefix arg, the next N files "
       (interactive "P")
       (let* ((fn-list (dired-get-marked-files nil arg)))
         (mapc 'find-file fn-list)))))
#+end_src

*** Stripe Dired buffers
#+name: stripe-dired
#+begin_src emacs-lisp :tangle no
(require 'stripe-buffer)
(add-hook 'org-mode-hook 'org-table-stripes-enable)
(add-hook 'dired-mode-hook 'stripe-listify-buffer)  
#+end_src

*** Recent Files setup
#+srcname: recentf-setup
#+begin_src emacs-lisp
 ;; save recent files
(setq recentf-save-file (expand-file-name "recentf" "~/.emacs.d/recentf/")
      recentf-max-saved-items 200
      recentf-max-menu-items 15)
(recentf-mode t)  
#+end_src

*** Editing tweaks
#+source: editing-tweaks
#+begin_src emacs-lisp
  ;; It's recommended to create a list of packages in init.el which will
  ;; be installed if they are found to not be present:
  ;; That way you can be ensured of a consistent experience across
  ;; machines.
  ;; (from: https://github.com/technomancy/emacs-starter-kit)
  
  ;; Highlight The Current line
  (global-hl-line-mode +1)
  
  (require 'volatile-highlights)
  (volatile-highlights-mode t)
  
  ;; Note - this should be after volatile-highlights is required
  ;; add the ability to copy and cut the current line, without marking it
  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position)
             (line-beginning-position 2)))))
  
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
             (line-beginning-position 2)))))
  
  ;; I use single spaces between paragraphs, so I will have to put up with
  ;; "forward-sentence" picking up abbreviations and titles as sentence endings.
  (setq sentence-end-double-space nil)
#+end_src   

*** Undo tree
#+source: editing-tweaks
#+begin_src emacs-lisp
  ;; Add undo-tree. Be sure to read how to use it.
  ;; C-_  C-/  (`undo-tree-undo')
  ;;   Undo changes.
  ;;
  ;; M-_  C-?  (`undo-tree-redo')
  ;;   Redo changes.
  ;;
  ;; `undo-tree-switch-branch'
  ;;   Switch undo-tree branch.
  ;;   (What does this mean? Better press the button and see!)
  ;;
  ;; C-x u  (`undo-tree-visualize')
  ;;   Visualize the undo tree.
  ;;   (Better try pressing this button too!)
  ;;
  ;; C-x r u  (`undo-tree-save-state-to-register')
  ;;   Save current buffer state to register.
  ;;
  ;; C-x r U  (`undo-tree-restore-state-from-register')
  ;;   Restore buffer state from register.
  (require 'undo-tree)
  (global-undo-tree-mode)
    
#+end_src

*** Scrolling
#+source: smooth-scroling
#+begin_src emacs-lisp
  ; these two commands allow smooth scrolling while keeping the cursor still
  ; use C-, to scroll up, C-. to scroll down
  ; author: Petr Glotov
  
  (defun scroll-one-down ()
    (interactive)
    (scroll-down 1)
    (previous-line)
    )
  
  (defun scroll-one-up ()
    (interactive)
    (scroll-up 1)
    (next-line)
    )
  (global-unset-key (kbd "C-,"))
  (add-hook 'org-mode-hook '(lambda () (local-unset-key (kbd "C-,"))))
  (global-set-key (kbd "C-,") 'scroll-one-down)
  (global-set-key (kbd "C-.") 'scroll-one-up)  
#+end_src

*** Display Tweaks / Transparency
#+source: display-tweaks
#+begin_src emacs-lisp
  (setq default-cursor-type 'bar) 
  
   ;;(set-frame-parameter (selected-frame) 'alpha '(<active> [<inactive>]))
 ;; (set-frame-parameter (selected-frame) 'alpha '(90 50))
;;  (add-to-list 'default-frame-alist '(alpha 90 50))
  
   ;; after you’ve set the alpha as above to assign a toggle to “C-c t”
  (eval-when-compile (require 'cl))
  (defun toggle-transparency ()
    (interactive)
    (if (/=
         (cadr (frame-parameter nil 'alpha))
         100)
        (set-frame-parameter nil 'alpha '(100 100))
      (set-frame-parameter nil 'alpha '(90 50))))
  (global-set-key (kbd "C-c t") 'toggle-transparency)
#+end_src

*** Workgroups
#+begin_src emacs-lisp
  (require 'workgroups)
  (setq wg-prefix-key (kbd "C-c w"))
  (workgroups-mode 1)
  (wg-load "~/Documents/Emacs - setup - reference/workgroups/workgroups")
#+end_src
** Local LaTeX settings
*** In-text Smart Quotes (XeLaTeX only)
    Redefine TeX-open-quote and TeX-close-quote to be smart quotes by default. Below, in the local org-mode settings, we'll also map the relevant function to a key we can use in org-mode, too. If you don't use XeLaTeX for processing all your =.tex= files, you should disable this option.

#+source: smart-quotes
#+begin_src emacs-lisp :tangle no
  (setq TeX-open-quote "“")
  (setq TeX-close-quote "”")
#+end_src

*** SyncTeX, PDF mode, Skim
Set up AUCTeX to work with the Skim PDF viewer.

#+srcname: local-loadpath
#+begin_src emacs-lisp :tangle no
   ;; Synctex with Skim
   ;;(add-hook 'TeX-mode-hook
   ;;(lambda ()
   ;;(add-to-list 'TeX-output-view-style
   ;;'("^pdf$" "."
   ;; "/Applications/Skim.app/Contents/SharedSupport/displayline %n %o %b")))
   ;; )

   ;; Make emacs aware of multi-file projects
   ;; (setq-default TeX-master nil)

   ;; Auto-raise Emacs on activation (from Skim, usually)
   (defun raise-emacs-on-aqua()
   (shell-command "osascript -e 'tell application \"Emacs\" to activate' &"))
   (add-hook 'server-switch-hook 'raise-emacs-on-aqua)
#+end_src

*** Local RefTeX Settings
Tell RefTeX where the bibliography files are. 

#+srcname: local-reftex
#+begin_src emacs-lisp  
  ;; Make RefTex able to find my local bib files
  (setq reftex-bibpath-environment-variables
        '("~/Documents/TeX-bibs"))
  
  ;; Default bibliography
  (setq reftex-default-bibliography
  '("~/Documents/TeX-bibs/ob-mis.bib"))
  
  
  ;; CDLaTex minor mode: tab-trigger environments, paired paren
  ;; insertion, etc
  ;; (autoload 'cdlatex-mode "cdlatex" "CDLaTeX Mode" t)
  ;; (autoload 'turn-on-cdlatex "cdlatex" "CDLaTeX Mode" nil)
  ;; (add-hook 'LaTeX-mode-hook 'turn-on-cdlatex)   ; with AUCTeX LaTeX
  ;;                                         ; mode
  
  ;; set which characters are autopaired // Doesn't work. Set in custom, below.
  ;; (add-hook 'cdlatex-mode-hook
  ;;   (function (lambda ()
  ;;               (setq cdlatex-paired-parens
  ;;                     '("$[{("))
  ;;             )))
#+end_src

*** Local vc commands
    Run the vc shellscript before running xelatex with C-c c (instead
    of C-c C-c for regular compile). This assumes you're using the VC
    LaTeX package, have vc in your path, and have vc-awk in the
    directory you're working in.

#+srcname: vc-command
#+begin_src emacs-lisp
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex);; Run the VC command before running xelatex
    (fset 'run-vc-then-xelatex
    [?\M-! ?v ?c return ?\C-c ?\C-c return])
    (global-set-key (kbd "C-c c") 'run-vc-then-xelatex)
#+end_src

    Or just run vc alone --- this is useful when writing LaTeX files
    using org-mode. (See the org-mode customizations below).

#+source: vc-alone
#+begin_src emacs-lisp
  (global-set-key (kbd "C-c v")
                      (lambda ()
                        (interactive)
                        (shell-command "vc")))

#+end_src

** Local Pandoc Support 
#+src-name: pandoc_mode
#+begin_src emacs-lisp 
 (load "pandoc-mode")
 (add-hook 'markdown-mode-hook 'turn-on-pandoc)
 (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings)
#+end_src

** Local iBuffer Settings
   Manage a lot of buffers easily with C-x C-b. Already set up
   elsewhere in the starter kit. Add local configuration here, e.g.,
   display categories.
#+srcname: iBuffer-custom
#+begin_src emacs-lisp 
  (setq ibuffer-saved-filter-groups
      '(("home"
	 ("emacs-config" (or (filename . ".emacs.d")
			     (filename . "emacs-config")))
	 ("Org" (or (mode . org-mode)
		    (filename . "OrgMode")))
	 ("Web Dev" (or (mode . html-mode)
			(mode . css-mode)))
	 ("Magit" (name . "\*magit"))
	 ("ESS" (mode . ess-mode))
         ("LaTeX" (mode . latex-mode))
	 ("Help" (or (name . "\*Help\*")
		     (name . "\*Apropos\*")
		     (name . "\*info\*"))))))

        (add-hook 'ibuffer-mode-hook 
	             '(lambda ()
	             (ibuffer-switch-to-saved-filter-groups "home")))
       (setq ibuffer-show-empty-filter-groups nil)                     
       (setq ibuffer-expert t)
       (add-hook 'ibuffer-mode-hook 
       '(lambda ()
       (ibuffer-auto-mode 1)
       (ibuffer-switch-to-saved-filter-groups "home")))
#+end_src

** Local Org-mode Settings
*** Org mode setup
 - Settings here and elsewhere are taken from http://doc.norang.ca/org-mode.html
#+begin_src emacs-lisp
  ;;
  ;; Standard key bindings
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+end_src

*** Default startup values
Instead of putting these in every org file, put it here once.
#+source: org-defaults
#+begin_src emacs-lisp
  (setq org-startup-folded 'content)
#+end_src

*** Flyspell
#+begin_src emacs-lisp
    ;; Flyspell mode in org-mode
    ;(add-hook 'org-mode-hook 'enable-flyspell)
    
    ;; recognize latex code as something that is not mispelled
    ;;(add-hook 'org-mode-hook (lambda () (setq ispell-parser 'tex)))
  
  ;; easy spell check
  (global-set-key (kbd "C-<f7>") 'ispell-word)
  (global-set-key (kbd "C-S-<f7>") 'flyspell-mode)
  (global-set-key (kbd "S-<f7>") 'flyspell-buffer)
  (global-set-key (kbd "M-S-<f7>") 'flyspell-check-previous-highlighted-word)
  (defun flyspell-check-next-highlighted-word ()
    "Custom function to spell check next highlighted word"
    (interactive)
    (flyspell-goto-next-error)
    (ispell-word)
    )
  (global-set-key (kbd "M-<f7>") 'flyspell-check-next-highlighted-word)
#+end_src

*** Smart-quote binding (not tangled)
When in an org-mode buffer, bind TeX-insert-quote to =C-c "=. Turned off by default. 

#+source: org-mode-smartquote-key
#+begin_src emacs-lisp :tangle no
  (add-hook 'org-mode-hook 'smart-quote-keys)
  
  (defun smart-quote-keys ()
    (require 'typopunct)
    (typopunct-change-language 'english)
    (local-set-key (kbd "C-c \'") 'typopunct-insert-single-quotation-mark)
    (local-set-key (kbd "C-c \"") 'typopunct-insert-quotation-mark)
    )
    
  
  
#+end_src

*** Archive Settings
    Where archived projects and tasks go.
#+source: orgmode-archive
#+begin_src emacs-lisp
  (setq org-archive-location "~/Documents/Org/archive/archive.org::From %s")
#+end_src

*** Mobile Settings
   Sync orgmode files with Dropbox and iPhone. 
#+src-name: orgmode-mobile
#+begin_src emacs-lisp
   ;; Set to the location of your Org files on your local system
   (setq org-directory "~/Documents/Org")
   ;; Set to <your Dropbox root directory>/MobileOrg.
   (setq org-mobile-directory "~/Dropbox/MobileOrg")
   ;; Set to the files (or directory of files) you want sync'd
   (setq org-agenda-files (quote ("~/Dropbox/Org")))
   ;; Set to the name of the file where new notes will be stored
   (setq org-mobile-inbox-for-pull "~/Dropbox/Org/from-mobile.org")
   

#+end_src

*** Babel Settings
   Configure org-mode so that when you edit source code in an indirect buffer (with C-c '), the buffer is opened in the current window. That way, your window organization isn't broken when switching.

#+source: orgmode-indirect-buffer-settings
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

*** XeLaTeX and pdfLaTeX Export Settings
   Configure org-mode to export directly to PDF using pdflatex or
   xelatex, compiling the bibliography as it goes, with my preferred
   setup in each case. There is a good deal of local stuff in this section. The required style files used below are available at https://github.com/kjhealy/latex-custom-kjh. You may need to adjust or remove some of these settings depending on your
   preferences and local configuration.

   This is the new version added by cpoile
#+source: orgmode-latex-export
#+begin_src emacs-lisp
        (require 'org-latex)
      
      ;; turn off the default toc behavior; deal with it properly in headers to files.
      (defun org-export-latex-no-toc (depth)  
          (when depth
            (format "%% Org-mode is exporting headings to %s levels.\n"
                    depth)))
      (setq org-export-latex-format-toc-function 'org-export-latex-no-toc)
      
      
        (unless (boundp 'org-export-latex-classes)
          (setq org-export-latex-classes nil))
        (add-to-list 'org-export-latex-classes
                     '("apamanuscript"
                       "\\documentclass[man]{apa6}"
                          ("\\section{%s}" . "\\section*{%s}")
                          ("\\subsection{%s}" . "\\subsection*{%s}")
                          ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                          ("\\paragraph{%s}" . "\\paragraph*{%s}")
                          ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
        
       (add-to-list 'org-export-latex-classes
                     '("tuftehandout"
                       "\\documentclass[nobib]{tufte-handout}
                        \\usepackage{hyphenat}
                        \\usepackage[style=apa,sortcites=true,sorting=nyt,
                          autocite=footnote,backend=biber]{biblatex}
                        \\usepackage{enumitem}
                        \\setitemize{itemsep=0pt, parsep=1pt}"
                          ("\\section{%s}" . "\\section*{%s}")
                          ("\\subsection{%s}" . "\\subsection*{%s}")))
        
          ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
          ;; but adapted to use latexmk 4.22 or higher.  
          (defun my-auto-tex-cmd ()
            "When exporting from .org with latex, automatically run latex,
                             pdflatex, or xelatex as appropriate, using latexmk."
            (let ((texcmd)))
            ;; default command: pdflatex 
            (setq texcmd "latexmk -pdflatex=pdflatex -pdf -outdir=%o %f")
            ;; pdflatex -> .pdf
            (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
                (setq texcmd "latexmk -pdflatex=pdflatex -pdf -outdir=%o %f"))
            ;; xelatex -> .pdf
            (if (string-match "LATEX_CMD: xelatex" (buffer-string))
                (setq texcmd "latexmk -pdflatex=xelatex  -pdf -output-directory %o %f"))
            ;; LaTeX compilation command
            (setq org-latex-to-pdf-process (list texcmd)))
          
          (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)
          
          ;; Default packages included in /every/ tex file, latex, pdflatex or xelatex
      ;    (setq org-export-latex-packages-alist
      ;          '(("" "graphicx" t)
      ;            ("" "longtable" nil)
      ;           ("" "float" )))
          
          ;; Custom packages
          (defun my-auto-tex-parameters ()
           "Automatically select the tex packages to include. These will be in ~/Documents/texmf/tex/latex/misc"
            ;; default packages for ordinary latex or pdflatex export
            (setq org-export-latex-default-packages-alist
                  '(("AUTO" "inputenc" t)
                    ("" "org-preamble-pdflatex" t))))
            ;; Packages to include when xelatex is used
      ;      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
      ;          (setq org-export-latex-default-packages-alist
                      ;;'(("minted" "org-preamble-xelatex" t) ))))
      ;                '(("minted" "org-preamble-xelatex" t) ))))
        
         (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)      
        
#+end_src


#+source: orgmode-xelatex-export
#+begin_src emacs-lisp :tangle no
  (require 'org-latex)   
    ;; Choose either listings or minted for exporting source code blocks.
    ;; Using minted (as here) requires pygments be installed. To use the
    ;; default listings package instead, use
    ;; (setq org-export-latex-listings t)
    ;; and change references to "minted" below to "listings"
    (setq org-export-latex-listings 'minted)
    
    ;; default settings for minted code blocks
    (setq org-export-latex-minted-options
          '(;("frame" "single")
            ("bgcolor" "bg") ; bg will need to be defined in the preamble of your document. It's defined in org-preamble-pdflatex.sty and org-preamble-xelatex.sty below.
            ("fontsize" "\\small")
            ))
  ;; turn off the default toc behavior; deal with it properly in headers to files.
  (defun org-export-latex-no-toc (depth)  
      (when depth
        (format "%% Org-mode is exporting headings to %s levels.\n"
                depth)))
  (setq org-export-latex-format-toc-function 'org-export-latex-no-toc)
  
    (add-to-list 'org-export-latex-classes
                 '("memarticle"
                   "\\documentclass[11pt,oneside,article]{memoir}\n   %\\input{vc} % vc package; removed for now"
                    ("\\section{%s}" . "\\section*{%s}")
                    ("\\subsection{%s}" . "\\subsection*{%s}")
                    ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
                    ("\\paragraph{%s}" . "\\paragraph*{%s}")
                    ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
    
    (add-to-list 'org-export-latex-classes
                 '("membook"
                   "\\documentclass[11pt,oneside]{memoir}\n       %\\input{vc} % vc package; removed for now"
                   ("\\chapter{%s}" . "\\chapter*{%s}")
                   ("\\section{%s}" . "\\section*{%s}")
                   ("\\subsection{%s}" . "\\subsection*{%s}")
                   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")))
    
    ;; Originally taken from Bruno Tavernier: http://thread.gmane.org/gmane.emacs.orgmode/31150/focus=31432
    ;; but adapted to use latexmk 4.22 or higher.  
    (defun my-auto-tex-cmd ()
      "When exporting from .org with latex, automatically run latex,
                       pdflatex, or xelatex as appropriate, using latexmk."
      (let ((texcmd)))
      ;; default command: pdflatex 
      (setq texcmd "latexmk -pdflatex=pdflatex -pdf %f")        
      ;; pdflatex -> .pdf
      (if (string-match "LATEX_CMD: pdflatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex=pdflatex -pdf %f"))
      ;; xelatex -> .pdf
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq texcmd "latexmk -pdflatex=xelatex  -pdf %f"))
      ;; LaTeX compilation command
      (setq org-latex-to-pdf-process (list texcmd)))
    
    (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-cmd)
    
    ;; Default packages included in /every/ tex file, latex, pdflatex or xelatex
    (setq org-export-latex-packages-alist
          '(("" "graphicx" t)
            ("" "longtable" nil)
            ("" "float" )))
    
    ;; Custom packages
    (defun my-auto-tex-parameters ()
      "Automatically select the tex packages to include. See https://github.com/kjhealy/latex-custom-kjh for the support files included here."
      ;; default packages for ordinary latex or pdflatex export
      (setq org-export-latex-default-packages-alist
            '(("AUTO" "inputenc" t)
              ("minted,minion" "org-preamble-pdflatex" t)))        
      ;; Packages to include when xelatex is used
      (if (string-match "LATEX_CMD: xelatex" (buffer-string))
          (setq org-export-latex-default-packages-alist
                '(("minted" "org-preamble-xelatex" t) ))))
    
    (add-hook 'org-export-latex-after-initial-vars-hook 'my-auto-tex-parameters)      
#+End_src

*** ebib and citation settings
    ebib is a bibtex database manager that works inside emacs. It can
    talk to org-mode. See [[http://orgmode.org/worg/org-tutorials/org-latex-export.html#sec-17_2][this Worg tutorial]] for details. 
#+source: ebib-setup
#+begin_src emacs-lisp
    (org-add-link-type "ebib" 'ebib)
  
   (org-add-link-type 
     "cite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "cite:" desc)))
               (format "\\cite{%s}" path)
               (format "\\cite[%s]{%s}" desc path)
               )))))
  
   (org-add-link-type 
     "parencite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "parencite:" desc)))
               (format "\\parencite{%s}" path)
               (format "\\parencite[%s]{%s}" desc path)
  )))))
  
  (org-add-link-type 
     "textcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "textcite:" desc)))
               (format "\\textcite{%s}" path)
               (format "\\textcite[%s]{%s}" desc path)
  )))))
  
  (org-add-link-type 
     "autocite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "autocite:" desc)))
               (format "\\autocite{%s}" path)
           (format "\\autocite[%s]{%s}" desc path)
  )))))
  
  (org-add-link-type 
   "footcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "footcite:" desc)))
           (format "\\footcite{%s}" path)
         (format "\\footcite[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
   "fullcite" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "fullcite:" desc)))
           (format "\\fullcite{%s}" path)
         (format "\\fullcite[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
   "citetitle" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitle:" desc)))
           (format "\\citetitle{%s}" path)
         (format "\\citetitle[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
   "citetitles" 'ebib
   (lambda (path desc format)
     (cond
      ((eq format 'latex)
       (if (or (not desc) (equal 0 (search "citetitles:" desc)))
           (format "\\citetitles{%s}" path)
         (format "\\citetitles[%s]{%s}" desc path)
         )))))
  
  (org-add-link-type 
     "headlessfullcite" 'ebib
     (lambda (path desc format)
       (cond
        ((eq format 'latex)
         (if (or (not desc) (equal 0 (search "headlessfullcite:" desc)))
               (format "\\headlessfullcite{%s}" path)
               (format "\\headlessfullcite[%s]{%s}" desc path)
  )))))   
#+end_src

*** HTML export Settings
Create =html= files form the =org= sources, to help with documentation. To set up org-mode for publishing projects to HTML you will need to change these settings, as they apply only to the Starter Kit. 

#+source: html-export-settings
#+begin_src emacs-lisp
  (setq org-publish-project-alist
         '(("org"
            :base-directory "~/.emacs.d/"
            :publishing-directory "~/Documents/websites/esk/"
            :auto-sitemap t
            :sitemap-filename "index.org"
            :sitemap-title "Emacs Starter Kit for the Social Sciences: Documentation"
            :section-numbers t
            :table-of-contents nil
            :style "<link rel=\"stylesheet\"
                   href=\"http://kieranhealy.org/stylesheets/screen.css\"
                   type=\"text/css\"/>")))
  
    (setq org-export-html-style-extra "") 
    (setq org-export-html-postamble nil)
  
#+end_src

** Org-mode / GTD Settings
 - Settings in this section are taken from http://doc.norang.ca/org-mode.html
*** Agenda Setup
#+begin_src emacs-lisp
  (setq org-agenda-files (quote ("~/Documents/org"
                                 ;;"~/Documents/org/client1"  
                                 )))
#+end_src
*** Keybindings
#+BEGIN_SRC emacs-lisp
  ;; Custom Key Bindings
  (global-set-key (kbd "<f12>") 'org-agenda)
  (global-set-key (kbd "<f5>") 'bh/org-todo)
  (global-set-key (kbd "<S-f5>") 'bh/widen)
  (global-set-key (kbd "<f7>") 'bh/set-truncate-lines)
  (global-set-key (kbd "<f8>") 'org-cycle-agenda-files)
  (global-set-key (kbd "<f9> <f9>") 'bh/show-org-agenda)
  (global-set-key (kbd "<f9> b") 'bbdb)
  (global-set-key (kbd "<f9> c") 'calendar)
  (global-set-key (kbd "<f9> f") 'boxquote-insert-file)
  ;(global-set-key (kbd "<f9> g") 'gnus)
  (global-set-key (kbd "<f9> h") 'bh/hide-other)
  (global-set-key (kbd "<f9> n") 'org-narrow-to-subtree)
  (global-set-key (kbd "<f9> w") 'widen)
  (global-set-key (kbd "<f9> u") 'bh/narrow-up-one-level)
  
  (global-set-key (kbd "<f9> I") 'bh/punch-in)
  (global-set-key (kbd "<f9> O") 'bh/punch-out)
  
  (global-set-key (kbd "<f9> o") 'bh/make-org-scratch)
  
  (global-set-key (kbd "<f9> r") 'boxquote-region)
  (global-set-key (kbd "<f9> s") 'bh/switch-to-scratch)
  
  (global-set-key (kbd "<f9> t") 'bh/insert-inactive-timestamp)
  ;(global-set-key (kbd "<f9> T") 'tabify)
  ;(global-set-key (kbd "<f9> U") 'untabify)
  
  (global-set-key (kbd "<f9> v") 'visible-mode)
  (global-set-key (kbd "<f9> SPC") 'bh/clock-in-last-task)
  (global-set-key (kbd "C-<f9>") 'previous-buffer)
  (global-set-key (kbd "M-<f9>") 'org-toggle-inline-images)
  ;(global-set-key (kbd "C-x n r") 'narrow-to-region)
  (global-set-key (kbd "C-<f10>") 'next-buffer)
  (global-set-key (kbd "<f11>") 'org-clock-goto)
  (global-set-key (kbd "C-<f11>") 'org-clock-in)
  ;(global-set-key (kbd "C-s-<f12>") 'bh/save-then-publish)
  (global-set-key (kbd "C-M-r") 'org-capture)
  (global-set-key (kbd "C-c r") 'org-capture)
  
  (defun bh/hide-other ()
    (interactive)
    (save-excursion
      (org-back-to-heading 'invisible-ok)
      (hide-other)
      (org-cycle)
      (org-cycle)
      (org-cycle)))
  
  (defun bh/set-truncate-lines ()
    "Toggle value of truncate-lines and refresh window display."
    (interactive)
    (setq truncate-lines (not truncate-lines))
    ;; now refresh window display (an idiom from simple.el):
    (save-excursion
      (set-window-start (selected-window)
                        (window-start (selected-window)))))
  
  (defun bh/make-org-scratch ()
    (interactive)
    (find-file "/tmp/publish/scratch.org")
    (gnus-make-directory "/tmp/publish"))
  
  (defun bh/switch-to-scratch ()
    (interactive)
    (switch-to-buffer "*scratch*"))
#+END_SRC

*** =TODO= Keywords, states, selection, triggers

#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
              (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE"))))

;;(setq org-todo-keyword-faces
;;      (quote (("TODO" :foreground "red" :weight bold)
;;              ("NEXT" :foreground "blue" :weight bold)
;;              ("DONE" :foreground "forest green" :weight bold)
;;              ("WAITING" :foreground "orange" :weight bold)
;;              ("HOLD" :foreground "magenta" :weight bold)
;;              ("CANCELLED" :foreground "forest green" :weight bold)
;;              ("PHONE" :foreground "forest green" :weight bold))))

(setq org-use-fast-todo-selection t)
;(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-todo-state-tags-triggers
      (quote (("CANCELLED" ("CANCELLED" . t))
              ("WAITING" ("WAITING" . t))
              ("HOLD" ("WAITING" . t) ("HOLD" . t))
              (done ("WAITING") ("HOLD"))
              ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
              ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
              ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC

*** Org Capture settings

#+BEGIN_SRC emacs-lisp
(setq org-directory "~/Documents/org")
(setq org-default-notes-file "~/Documents/org/inbox.org")

;; Capture templates for: TODO tasks, Notes, appointments, phone calls, and org-protocol
(setq org-capture-templates
      (quote (("t" "todo" entry (file "~/Documents/org/inbox.org")
               "* TODO %?\n%U\n%a\n" :clock-in t :clock-resume t)
              ("r" "respond" entry (file "~/Documents/org/inbox.org")
               "* NEXT Respond to %:from on %:subject\nSCHEDULED: %t\n%U\n%a\n" :clock-in t :clock-resume t :immediate-finish t)
              ("n" "note" entry (file "~/Documents/org/inbox.org")
               "* %? :NOTE:\n%U\n%a\n" :clock-in t :clock-resume t)
              ("j" "Journal" entry (file+datetree "~/Documents/org/journal.org")
               "* %?\n%U\n" :clock-in t :clock-resume t)
              ("w" "org-protocol" entry (file "~/Documents/org/inbox.org")
               "* TODO Review %c\n%U\n" :immediate-finish t)
              ("p" "Phone call" entry (file "~/Documents/org/inbox.org")
               "* PHONE %? :PHONE:\n%U" :clock-in t :clock-resume t)
              ("h" "Habit" entry (file "~/Documents/org/inbox.org")
               "* NEXT %?\n%U\n%a\nSCHEDULED: %(format-time-string \"<%Y-%m-%d %a .+1d/3d>\")\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n"))))

;; Remove empty LOGBOOK drawers on clock out
(defun bh/remove-empty-drawer-on-clock-out ()
  (interactive)
  (save-excursion
    (beginning-of-line 0)
    (org-remove-empty-drawer-at "LOGBOOK" (point))))

(add-hook 'org-clock-out-hook 'bh/remove-empty-drawer-on-clock-out 'append)


#+END_SRC

*** Refile settings

#+BEGIN_SRC emacs-lisp
  ; Targets include this file and any file contributing to the agenda - up to 9 levels deep
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
  
  ; Use full outline paths for refile targets - we file directly with IDO
  (setq org-refile-use-outline-path t)
  
  ; Targets complete directly with IDO
  (setq org-outline-path-complete-in-steps nil)
  
  ; Allow refile to create parent tasks with confirmation
  (setq org-refile-allow-creating-parent-nodes (quote confirm))
  
  ; Use IDO for both buffer and file completion and ido-everywhere to t
  (setq org-completion-use-ido t)
  (setq ido-everywhere t)
  (setq ido-max-directory-size 100000)
  (ido-mode (quote both))
  
  ;;;; Refile settings
  ; Exclude DONE state tasks from refile targets
  (defun bh/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  
  (setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

*** Creating a block agenda viewer

#+begin_src emacs-lisp
  ;; Do not dim blocked tasks
  (setq org-agenda-dim-blocked-tasks nil)
  
  ;; Compact the block agenda view
  (setq org-agenda-compact-blocks t)
  
  ;; Custom agenda command definitions
  (setq org-agenda-custom-commands
        (quote (("N" "Notes" tags "NOTE"
                 ((org-agenda-overriding-header "Notes")
                  (org-tags-match-list-sublevels t)))
                ("h" "Habits" tags-todo "STYLE=\"habit\""
                 ((org-agenda-overriding-header "Habits")
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                (" " "Agenda"
                 ((agenda "" nil)
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                  (tags-todo "-WAITING-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header "Next Tasks")
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-agenda-todo-ignore-scheduled t)
                              (org-agenda-todo-ignore-deadlines t)
                              (org-agenda-todo-ignore-with-date t)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-sorting-strategy
                               '(todo-state-down effort-up category-keep))))
                  (tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                             ((org-agenda-overriding-header "Tasks")
                              (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                              (org-agenda-todo-ignore-scheduled t)
                              (org-agenda-todo-ignore-deadlines t)
                              (org-agenda-todo-ignore-with-date t)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED+WAITING/!"
                             ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                              (org-agenda-skip-function 'bh/skip-stuck-projects)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled 'future)
                              (org-agenda-todo-ignore-deadlines 'future)))
                  (tags "-REFILE/"
                        ((org-agenda-overriding-header "Tasks to Archive")
                         (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                         (org-tags-match-list-sublevels nil))))
                 nil)
                ("r" "Tasks to Refile" tags "REFILE"
                 ((org-agenda-overriding-header "Tasks to Refile")
                  (org-tags-match-list-sublevels nil)))
                ("#" "Stuck Projects" tags-todo "-CANCELLED/!"
                 ((org-agenda-overriding-header "Stuck Projects")
                  (org-agenda-skip-function 'bh/skip-non-stuck-projects)))
                ("n" "Next Tasks" tags-todo "-WAITING-CANCELLED/!NEXT"
                 ((org-agenda-overriding-header "Next Tasks")
                  (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                  (org-agenda-todo-ignore-scheduled t)
                  (org-agenda-todo-ignore-deadlines t)
                  (org-agenda-todo-ignore-with-date t)
                  (org-tags-match-list-sublevels t)
                  (org-agenda-sorting-strategy
                   '(todo-state-down effort-up category-keep))))
                ("R" "Tasks" tags-todo "-REFILE-CANCELLED/!-HOLD-WAITING"
                 ((org-agenda-overriding-header "Tasks")
                  (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                  (org-agenda-sorting-strategy
                   '(category-keep))))
                ("p" "Projects" tags-todo "-HOLD-CANCELLED/!"
                 ((org-agenda-overriding-header "Projects")
                  (org-agenda-skip-function 'bh/skip-non-projects)
                  (org-agenda-sorting-strategy
                   '(category-keep))))
                ("w" "Waiting Tasks" tags-todo "-CANCELLED+WAITING/!"
                 ((org-agenda-overriding-header "Waiting and Postponed tasks"))
                 (org-tags-match-list-sublevels nil))
                ("A" "Tasks to Archive" tags "-REFILE/"
                 ((org-agenda-overriding-header "Tasks to Archive")
                  (org-agenda-skip-function 'bh/skip-non-archivable-tasks)
                  (org-tags-match-list-sublevels nil))))))
#+end_src
*** Next keyword setting
#+BEGIN_QUOTE
=NEXT= keywords are for *tasks* and not *projects*.  I've added a
function to the todo state change hook and clock in hook so that any
parent tasks marked =NEXT= automagically change from =NEXT= to =TODO=
since they are now projects and not tasks.
#+END_QUOTE 

#+begin_src emacs-lisp
  (defun bh/mark-next-parent-tasks-todo ()
    "Visit each parent task and change NEXT states to TODO"
    (let ((mystate (or (and (fboundp 'org-state)
                            state)
                       (nth 2 (org-heading-components)))))
      (when (equal mystate "NEXT")
        (save-excursion
          (while (org-up-heading-safe)
            (when (member (nth 2 (org-heading-components)) (list "NEXT"))
              (org-todo "TODO")))))))
  
  (add-hook 'org-after-todo-state-change-hook 'bh/mark-next-parent-tasks-todo 'append)
  (add-hook 'org-clock-in-hook 'bh/mark-next-parent-tasks-todo 'append)
#+end_src

** Auto-complete mode
   Powerful autocompletion; experimentally added. Will pop-up
   autocomplete suggestions as you type; hit =TAB= to complete, or
   choose from the menu of options.

#+source: auto-complete
#+begin_src emacs-lisp
  ;; compile it if the .el file is newer 
  ;;(byte-recompile-directory "~/.emacs.d/src/auto-complete")
  ;;(byte-recompile-directory "~/.emacs.d/src/auto-complete/dict/ess")
  (require 'auto-complete)
  (require 'auto-complete-config)
  (global-auto-complete-mode t)
  (add-to-list 'ac-dictionary-directories "~/.emacs.d/src/auto-complete/dict")
  (setq ac-modes (append ac-modes '(org-mode))) 
  (ac-config-default)
  (define-key ac-complete-mode-map [tab] 'ac-expand)
  ;;(require 'ac-R)
  (setq ac-auto-start 4)
  (ac-flyspell-workaround)
  (define-key ac-mode-map (kbd "M-TAB") 'auto-complete)
  (setq ac-auto-show-menu 0.8)
  (define-key ac-completing-map (kbd "M-h") 'ac-quick-help)
  ;; 
  
  ;;(set-face-background 'ac-candidate-face "#366060")
  ;;(set-face-foreground 'ac-selection-face "#1f1f1f")
  ;;(set-face-background 'ac-selection-face "#8cd0d3")
  ;;(set-face-foreground 'ac-selection-face "#1f1f1f")
  
#+end_src

*** IRC
Sometimes useful for getting help on R or Emacs. 
#+source: rirc-configuration
#+begin_src emacs-lisp
  ;; connect to irc on invocation but don't autojoin any channels
  (require 'rcirc)
  (add-to-list 'rcirc-server-alist
                       '("irc.freenode.net"))
#+end_src

*** Final Custom elements
Some last tweaks. 

#+#+BEGIN_SRC 

#+END_SRC
name: final-custom
#+begin_src emacs-lisp
  ;; minimize fringe
  (setq-default indicate-empty-lines nil)
  
  ;; Add keybindings for commenting regions of text
  (global-set-key (kbd "C-c ;") 'comment-or-uncomment-region)
  (global-set-key (kbd "M-'") 'comment-or-uncomment-region)
  
  ;; Base dir
  (cd "~/")
  
  ;; custom variables kludge. Why can't I get these to work via setq?
  (custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(LaTeX-XeTeX-command "xelatex -synctex=1")
  '(TeX-engine (quote xetex))
  '(TeX-view-program-list (quote (("AdobeReader" "/Program Files (x86)/Adobe/Acrobat 9.0/Acrobat %n %o %b"))))
  '(TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "AdobeReader") (output-html "xdg-open"))))
  '(show-paren-mode t)
  '(blink-cursor-mode nil)
  '(text-mode-hook (quote (text-mode-hook-identify)))
  )
#+end_src
   
   
   
   
   
** ESS
*** Set ESS mode
#+begin_src emacs-lisp
(defun ess-set-language ()
  (setq-default ess-language "R")
  (setq ess-language "R")
  )

(add-hook 'ess-post-run-hook 'ess-set-language t)
#+end_src
